{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design/react-app/src/ProgressBar.js\";\nimport CircularProgressWithLabel from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProgressBar = () => {\n  var running = true;\n  var finished = false;\n  var progress = 45;\n\n  if (running) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [/*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n        variant: \"determinate\",\n        value: progress,\n        className: \"progressbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        className: \"progresslabel\",\n        color: \"caption\",\n        children: `${Math.round(progress)}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this);\n  } else if (finished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputsequences\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sequencelabels\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"ProbeF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"ProbeQ: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sink: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sink*: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outsequences\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: probeF\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: probeQ\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: sink\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: sinkC\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emptyoutput\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_c = ProgressBar;\nexport default ProgressBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design/react-app/src/ProgressBar.js"],"names":["CircularProgressWithLabel","Typography","ProgressBar","running","finished","progress","Math","round","probeF","probeQ","sink","sinkC"],"mappings":";AAAA,OAAOA,yBAAP,MAAsC,oCAAtC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;;AAIA,MAAMC,WAAW,GAAG,MAAM;AAEtB,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAGF,OAAH,EAAY;AACR,wBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI,QAAC,yBAAD;AAA2B,QAAA,OAAO,EAAC,aAAnC;AAAiD,QAAA,KAAK,EAAEE,QAAxD;AAAkE,QAAA,SAAS,EAAC;AAA5E;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,SAApB;AAA8B,QAAA,SAAS,EAAC,eAAxC;AAAwD,QAAA,KAAK,EAAC,SAA9D;AAAA,kBAA0E,GAAEC,IAAI,CAACC,KAAL,CAC1EF,QAD0E,CAE1E;AAFF;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GATD,MAUK,IAAID,QAAJ,EAAc;AACf,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACI;AAAA,oBAAII;AAAJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,oBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA,oBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH,GAjBI,MAkBA;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AAEJ,CA1CD;;KAAMT,W;AA4CN,eAAeA,WAAf","sourcesContent":["import CircularProgressWithLabel from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nconst ProgressBar = () => {\n\n    var running = true;\n    var finished = false;\n    var progress = 45\n\n    if(running) {\n        return (\n            <div className=\"progress\">\n                <CircularProgressWithLabel variant=\"determinate\" value={progress} className=\"progressbar\"/>\n                <Typography variant=\"caption\" className=\"progresslabel\" color='caption'>{`${Math.round(\n                  progress,\n                )}%`}</Typography>\n            </div>\n        );\n    }\n    else if (finished) {\n        return (\n            <div className=\"outputsequences\">\n                <div className=\"sequencelabels\">\n                    <p>ProbeF: </p>\n                    <p>ProbeQ: </p>\n                    <p>Sink: </p>\n                    <p>Sink*: </p>\n                </div>\n                <div className=\"outsequences\">\n                    <p>{probeF}</p>\n                    <p>{probeQ}</p>\n                    <p>{sink}</p>\n                    <p>{sinkC}</p>\n                </div>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"emptyoutput\">\n                <h2>Output</h2>\n            </div>\n        );\n    }\n\n};\n\nexport default ProgressBar;"]},"metadata":{},"sourceType":"module"}