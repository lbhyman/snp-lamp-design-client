{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design/react-app/src/Output.js\";\nimport CircularProgressWithLabel from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Output = () => {\n  var running = true;\n  var finished = true;\n  var progress = 50;\n  var probeF = 'ATGC';\n  var probeQ = 'ATGC';\n  var sink = 'ATGC';\n  var sinkC = 'ATGC';\n\n  if (running) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Optimization in Progress...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"progress indicator\",\n        className: \"proglabel\",\n        children: [Math.round(progress), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n        variant: \"determinate\",\n        size: \"150px\",\n        value: progress,\n        className: \"progressbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  } else if (finished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputsequences\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sequencelabels\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"ProbeF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"ProbeQ: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sink: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sink*: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outsequences\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: probeF\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: probeQ\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: sink\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: sinkC\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emptyoutput\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_c = Output;\nexport default Output;\n\nvar _c;\n\n$RefreshReg$(_c, \"Output\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design/react-app/src/Output.js"],"names":["CircularProgressWithLabel","Typography","Output","running","finished","progress","probeF","probeQ","sink","sinkC","Math","round"],"mappings":";AAAA,OAAOA,yBAAP,MAAsC,oCAAtC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;;AAIA,MAAMC,MAAM,GAAG,MAAM;AAEjB,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,MAAb;AACA,MAAIC,MAAM,GAAG,MAAb;AACA,MAAIC,IAAI,GAAG,MAAX;AACA,MAAIC,KAAK,GAAG,MAAZ;;AAEA,MAAGN,OAAH,EAAY;AACR,wBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,GAAG,EAAC,oBAAX;AAAgC,QAAA,SAAS,EAAC,WAA1C;AAAA,mBAAuDO,IAAI,CAACC,KAAL,CAAWN,QAAX,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,yBAAD;AAA2B,QAAA,OAAO,EAAC,aAAnC;AAAiD,QAAA,IAAI,EAAC,OAAtD;AAA8D,QAAA,KAAK,EAAEA,QAArE;AAA+E,QAAA,SAAS,EAAC;AAAzF;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GATD,MAUK,IAAID,QAAJ,EAAc;AACf,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAQI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACI;AAAA,oBAAIE;AAAJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,oBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA,oBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH,GAlBI,MAmBA;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AAEJ,CA/CD;;KAAMP,M;AAiDN,eAAeA,MAAf","sourcesContent":["import CircularProgressWithLabel from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nconst Output = () => {\n\n    var running = true;\n    var finished = true;\n    var progress = 50\n    var probeF = 'ATGC'\n    var probeQ = 'ATGC'\n    var sink = 'ATGC'\n    var sinkC = 'ATGC'\n\n    if(running) {\n        return (\n            <div className=\"progress\">\n                <h2>Optimization in Progress...</h2>\n                <label for=\"progress indicator\" className=\"proglabel\">{Math.round(progress)}%</label>\n                <CircularProgressWithLabel variant=\"determinate\" size='150px' value={progress} className=\"progressbar\"/>\n                \n            </div>\n        );\n    }\n    else if (finished) {\n        return (\n            <div className=\"outputsequences\">\n                <h2>Output</h2>\n                <div className=\"sequencelabels\">\n                    <p>ProbeF: </p>\n                    <p>ProbeQ: </p>\n                    <p>Sink: </p>\n                    <p>Sink*: </p>\n                </div>\n                <div className=\"outsequences\">\n                    <p>{probeF}</p>\n                    <p>{probeQ}</p>\n                    <p>{sink}</p>\n                    <p>{sinkC}</p>\n                </div>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"emptyoutput\">\n                <h2>Output</h2>\n            </div>\n        );\n    }\n\n};\n\nexport default Output;"]},"metadata":{},"sourceType":"module"}