{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport NodeFetch from 'node-fetch';\nexport const shareableRunningState = () => {\n  _s();\n\n  const [running, setRunning] = useState(false);\n  return {\n    running,\n    setRunning\n  };\n};\n\n_s(shareableRunningState, \"GqSjlWMyRcFSNk6JAdDkMp9357M=\");\n\nexport const shareableFinishedState = () => {\n  _s2();\n\n  const [finished, setFinished] = useState(false);\n  return {\n    finished,\n    setFinished\n  };\n};\n\n_s2(shareableFinishedState, \"mZBoEqN32gr4012eGv/dCEBa7uo=\");\n\nexport const shareableGAProgressState = () => {\n  _s3();\n\n  const [GAProgress, setGAProgress] = useState(0);\n  return {\n    GAProgress,\n    setGAProgress\n  };\n};\n\n_s3(shareableGAProgressState, \"NNJRei+Z2luInje77Z08KK60zQE=\");\n\nexport const shareableOutputState = () => {\n  _s4();\n\n  const [output, setOutput] = useState();\n  return {\n    output,\n    setOutput\n  };\n};\n\n_s4(shareableOutputState, \"WnuMlFXT1y2OZOxPABl/NBYju+4=\");\n\nclass Optimizer {\n  constructor(probeParams, popSize) {\n    this.reset = () => {\n      this.probePopulation = [];\n      setRunning(false);\n      setFinished(false);\n      setGAProgress(0);\n      setOutput(null);\n    };\n\n    this.generateInitialGAPopulation = () => {\n      var endPoint = this.endPointAddress.concat('/generate_initial_population');\n      var params = {\n        popSize: this.popSize,\n        probeParams: this.probeParams\n      };\n      NodeFetch(endPoint, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(params)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        this.probePopulation = JSON.parse(json);\n      });\n    };\n\n    this.generateNextGAPopulation = () => {\n      var endPoint = this.endPointAddress.concat('/generate_next_population');\n      NodeFetch(endPoint, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(this.probePopulation)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        this.probePopulation = JSON.parse(json);\n      });\n    };\n\n    this.generateNextHillClimbingSteps = () => {\n      var endPoint = this.endPointAddress.concat('/hill_climbing_options');\n      NodeFetch(endPoint, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(this.probePopulation)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        this.probePopulation = JSON.parse(json);\n      });\n    };\n\n    this.calculateProbeFitness = probe => {\n      var endPoint = this.endPointAddress.concat('/calculate_fitness');\n      NodeFetch(endPoint, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(probe)\n      }).then(function (response) {\n        return JSON.parse(response.json());\n      });\n    };\n\n    this.calculatePopulationFitness = () => {\n      for (var i = 0; i < this.probePopulation.length; i++) {\n        if (!this.running) {\n          this.reset();\n          return null;\n        }\n\n        var currProbe = this.probePopulation[i];\n\n        if (currProbe.beta[0] != 0) {\n          this.probePopulation[i] = this.calculateProbeFitness(currProbe);\n        }\n\n        setGAProgress(this.GAProgress + 1);\n      }\n    };\n\n    this.getBestProbe = () => {\n      var bestProbe = this.probePopulation[0];\n\n      for (var i = 0; i < this.probePopulation.length; i++) {\n        var currProbe = this.probePopulation[i];\n\n        if (currProbe.beta[0] > bestProbe.beta[0]) {\n          bestProbe = currProbe;\n        }\n      }\n\n      return bestProbe;\n    };\n\n    this.runGA = () => {\n      this.generateInitialGAPopulation();\n      this.calculatePopulationFitness();\n\n      while (this.probePopulation.length > 1) {\n        this.generateNextGAPopulation();\n        this.calculatePopulationFitness();\n      }\n\n      this.calculatePopulationFitness();\n    };\n\n    this.runHillClimbing = () => {\n      var bestProbe = this.getBestProbe();\n      this.generateNextHillClimbingSteps();\n      this.calculatePopulationFitness();\n      var newProbe = this.getBestProbe();\n\n      while (newProbe.beta[0] > bestProbe.beta[0] && this.probePopulation.length > 1) {\n        bestProbe = newProbe;\n        this.generateNextHillClimbingSteps();\n        this.calculatePopulationFitness();\n        var newProbe = this.getBestProbe();\n      }\n\n      this.finalProbe = bestProbe;\n    };\n\n    this.run = () => {\n      setRunning(true);\n      setFinished(false);\n      this.runGA();\n      this.runHillClimbing();\n\n      if (this.probePopulation.length > 0) {\n        setFinished(true);\n        setOutput(this.finalProbe);\n      }\n\n      setRunning(false);\n    };\n\n    this.probeParams = probeParams;\n    this.popSize = popSize;\n    this.probePopulation = [];\n    this.finalProbe = null;\n    this.running = useBetween(shareableRunningState);\n    this.finished = useBetween(shareableFinishedState);\n    this.GAProgress = useBetween(shareableGAProgressState);\n    this.output = useBetween(shareableOutputState);\n    this.endPointAddress = 'http://127.0.0.1:5000'; // TODO: Use environment variable\n\n    this.reset();\n  }\n\n}\n\nexport default Optimizer;","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Optimizer.js"],"names":["useState","useBetween","NodeFetch","shareableRunningState","running","setRunning","shareableFinishedState","finished","setFinished","shareableGAProgressState","GAProgress","setGAProgress","shareableOutputState","output","setOutput","Optimizer","constructor","probeParams","popSize","reset","probePopulation","generateInitialGAPopulation","endPoint","endPointAddress","concat","params","headers","method","body","JSON","stringify","then","response","json","parse","generateNextGAPopulation","generateNextHillClimbingSteps","calculateProbeFitness","probe","calculatePopulationFitness","i","length","currProbe","beta","getBestProbe","bestProbe","runGA","runHillClimbing","newProbe","finalProbe","run"],"mappings":"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","sourcesContent":["\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport NodeFetch from 'node-fetch';\n\nexport const shareableRunningState = () => {\n    const [running, setRunning] = useState(false);\n    return {\n        running,\n        setRunning\n    }\n}\n\nexport const shareableFinishedState = () => {\n    const [finished, setFinished] = useState(false);\n    return {\n        finished,\n        setFinished\n    }\n}\n\nexport const shareableGAProgressState = () => {\n    const [GAProgress, setGAProgress] = useState(0);\n    return {\n        GAProgress,\n        setGAProgress\n    }    \n}\n\nexport const shareableOutputState = () => {\n    const [output, setOutput] = useState();\n    return {\n        output,\n        setOutput\n    }    \n}\n\nclass Optimizer {\n\n    constructor(probeParams, popSize) {\n        this.probeParams = probeParams;\n        this.popSize = popSize;\n        this.probePopulation = [];\n        this.finalProbe = null;\n        this.running = useBetween(shareableRunningState);\n        this.finished = useBetween(shareableFinishedState);\n        this.GAProgress = useBetween(shareableGAProgressState);\n        this.output = useBetween(shareableOutputState);\n        this.endPointAddress = 'http://127.0.0.1:5000'; // TODO: Use environment variable\n        this.reset();\n    }\n\n    reset = () => {\n        this.probePopulation = [];\n        setRunning(false);\n        setFinished(false);\n        setGAProgress(0);\n        setOutput(null);\n    };\n\n    generateInitialGAPopulation = () => {\n        var endPoint = this.endPointAddress.concat('/generate_initial_population');\n        var params = {\n            popSize: this.popSize,\n            probeParams: this.probeParams\n        }\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(params)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            this.probePopulation = JSON.parse(json);\n        })\n    };\n\n    generateNextGAPopulation = () => {\n        var endPoint = this.endPointAddress.concat('/generate_next_population');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(this.probePopulation)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            this.probePopulation = JSON.parse(json);\n        })\n    };\n\n    generateNextHillClimbingSteps = () => {\n        var endPoint = this.endPointAddress.concat('/hill_climbing_options');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(this.probePopulation)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            this.probePopulation = JSON.parse(json);\n        })\n    };\n\n    calculateProbeFitness = (probe) => {\n        var endPoint = this.endPointAddress.concat('/calculate_fitness');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(probe)\n        }).then(function (response) {\n            return JSON.parse(response.json());\n        })\n    };\n\n    calculatePopulationFitness = () => {\n        for (var i=0; i<this.probePopulation.length; i++) {\n            if(!this.running) {\n                this.reset();\n                return null;\n            }\n            var currProbe = this.probePopulation[i];\n            if (currProbe.beta[0] != 0) {\n                this.probePopulation[i] = this.calculateProbeFitness(currProbe);\n            }\n            setGAProgress(this.GAProgress + 1);\n        }    \n    };\n\n    getBestProbe = () => {\n        var bestProbe = this.probePopulation[0];\n        for (var i=0; i<this.probePopulation.length; i++) {\n            var currProbe = this.probePopulation[i];\n            if (currProbe.beta[0] > bestProbe.beta[0]) {\n                bestProbe = currProbe;\n            }\n        }\n        return bestProbe;\n    };\n\n    runGA = () => {\n        this.generateInitialGAPopulation();\n        this.calculatePopulationFitness();\n        while (this.probePopulation.length > 1) {\n            this.generateNextGAPopulation();\n            this.calculatePopulationFitness();\n        }\n        this.calculatePopulationFitness();\n    };\n\n    runHillClimbing = () => {\n        var bestProbe = this.getBestProbe();\n        this.generateNextHillClimbingSteps();\n        this.calculatePopulationFitness();\n        var newProbe = this.getBestProbe();\n        while (newProbe.beta[0] > bestProbe.beta[0] && this.probePopulation.length > 1) {\n            bestProbe = newProbe;\n            this.generateNextHillClimbingSteps();\n            this.calculatePopulationFitness();\n            var newProbe = this.getBestProbe();\n        }\n        this.finalProbe = bestProbe;\n    };\n\n    run = () => {\n        setRunning(true);\n        setFinished(false);\n        this.runGA();\n        this.runHillClimbing();\n        if (this.probePopulation.length > 0) {\n            setFinished(true);\n            setOutput(this.finalProbe);\n        }\n        setRunning(false);\n    };\n}\n\nexport default Optimizer;"]},"metadata":{},"sourceType":"module"}