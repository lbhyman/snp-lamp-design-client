{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareablePopSizeState } from './PopSlider.js';\nimport { ShareableProbeParams } from './Buttons.js';\nimport NodeFetch from 'node-fetch';\nconst endPointAddress = 'http://127.0.0.1:8000'; // TODO: Use environment variable\n\nexport const ShareableRunningState = () => {\n  _s();\n\n  const [running, setRunning] = useState(false);\n  return {\n    running,\n    setRunning\n  };\n};\n\n_s(ShareableRunningState, \"GqSjlWMyRcFSNk6JAdDkMp9357M=\");\n\n_c = ShareableRunningState;\nexport const ShareableFinishedState = () => {\n  _s2();\n\n  const [finished, setFinished] = useState(false);\n  return {\n    finished,\n    setFinished\n  };\n};\n\n_s2(ShareableFinishedState, \"mZBoEqN32gr4012eGv/dCEBa7uo=\");\n\n_c2 = ShareableFinishedState;\nexport const ShareableOutputState = () => {\n  _s3();\n\n  const [output, setOutput] = useState(null);\n  return {\n    output,\n    setOutput\n  };\n};\n\n_s3(ShareableOutputState, \"ppWByPgNJ+PeYTAdgwjKOSbvJUE=\");\n\n_c3 = ShareableOutputState;\nexport const ShareableWarningState = () => {\n  _s4();\n\n  const [warning, setWarning] = useState('');\n  return {\n    warning,\n    setWarning\n  };\n}; // Check whether the user has provided valid input and generate a warning to show\n\n_s4(ShareableWarningState, \"QgWVaa52qMHZiqsy7aSwVP0Ecac=\");\n\n_c4 = ShareableWarningState;\n\nconst screenInput = probeParams => {\n  if (probeParams.params.temperature > 100.0 || probeParams.params.Temperature < 0.0) {\n    return 'Temperature must be in the range 0-100C.';\n  }\n\n  if (probeParams.params.magnesium > 0.1) {\n    return 'Magnesium must be in the range 0-100mM';\n  }\n\n  if (probeParams.params.sodium > 0.5 || probeParams.params.sodium < 0.01) {\n    return 'Sodium must be in the range 10-500mM';\n  }\n  /*const regexp = /^[CAGTcagt]+$/;\n  if (!probeParams.WT.match(regexp) || !probeParams.SNP.match(regexp)) {\n      return 'Input sequences must be DNA, and must consist of A/C/T/G bases.';\n  }*/\n\n\n  if (probeParams.WT.length < 10 || probeParams.WT.length > 100) {\n    return 'Sequence lengths must be in the range 0-100 bases.';\n  }\n\n  if (probeParams.SNP.length < 10 || probeParams.SNP.length > 100) {\n    return 'Sequence lengths must be in the range 0-100 bases.';\n  }\n\n  return ''; // No warnings\n};\n\nasync function runOptimizer(probeParams, popSize) {\n  var endPoint = endPointAddress.concat('/start_optimizer');\n  return NodeFetch(endPoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      'probeParams': probeParams,\n      'popSize': popSize\n    })\n  }).then(response => {\n    if (response.status >= 400) {\n      throw new Error('Bad response from server');\n    }\n  }).then(function (response) {\n    return response.json();\n  });\n}\n\n;\n\nconst Optimizer = () => {\n  _s5();\n\n  const {\n    probeParams\n  } = useBetween(ShareableProbeParams);\n  const {\n    setRunning\n  } = useBetween(ShareableRunningState);\n  const {\n    setFinished\n  } = useBetween(ShareableFinishedState);\n  const {\n    setOutput\n  } = useBetween(ShareableOutputState);\n  const {\n    popSize\n  } = useBetween(ShareablePopSizeState);\n  const {\n    warning,\n    setWarning\n  } = useBetween(ShareableWarningState); // Run on mount\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      setWarning(screenInput(probeParams));\n\n      if (warning !== '') {\n        setFinished(false);\n        setRunning(false);\n      }\n    }\n\n    if (warning === '') {\n      runOptimizer(probeParams, popSize).then(output => {\n        if (mounted) {\n          setOutput(output);\n          setFinished(true);\n          setRunning(false);\n        }\n      }).catch(err => {\n        console.log(err);\n        setWarning('An error occurred while connecting to the optimization server. Please try again.');\n        setFinished(false);\n        setRunning(false);\n      });\n    }\n\n    return () => mounted = false; // eslint-disable-next-line \n  }, []);\n  return null;\n};\n\n_s5(Optimizer, \"Nq1QEqur3z2xJMiHV+1Ip6YMyfg=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween, useBetween, useBetween];\n});\n\n_c5 = Optimizer;\nexport default Optimizer;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ShareableRunningState\");\n$RefreshReg$(_c2, \"ShareableFinishedState\");\n$RefreshReg$(_c3, \"ShareableOutputState\");\n$RefreshReg$(_c4, \"ShareableWarningState\");\n$RefreshReg$(_c5, \"Optimizer\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Optimizer.js"],"names":["useState","useEffect","useBetween","ShareablePopSizeState","ShareableProbeParams","NodeFetch","endPointAddress","ShareableRunningState","running","setRunning","ShareableFinishedState","finished","setFinished","ShareableOutputState","output","setOutput","ShareableWarningState","warning","setWarning","screenInput","probeParams","params","temperature","Temperature","magnesium","sodium","WT","length","SNP","runOptimizer","popSize","endPoint","concat","headers","method","body","JSON","stringify","then","response","status","Error","json","Optimizer","mounted","catch","err","console","log"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareablePopSizeState } from './PopSlider.js';\nimport { ShareableProbeParams } from './Buttons.js';  \nimport NodeFetch from 'node-fetch';\n\nconst endPointAddress = 'http://127.0.0.1:8000'; // TODO: Use environment variable\n\nexport const ShareableRunningState = () => {\n    const [running, setRunning] = useState(false);\n    return {\n        running,\n        setRunning\n    };\n};\n\nexport const ShareableFinishedState = () => {\n    const [finished, setFinished] = useState(false);\n    return {\n        finished,\n        setFinished\n    };\n};\n\nexport const ShareableOutputState = () => {\n    const [output, setOutput] = useState(null);\n    return {\n        output,\n        setOutput\n    };    \n};\n\nexport const ShareableWarningState = () => {\n    const [warning, setWarning] = useState('');\n    return {\n        warning,\n        setWarning\n    };    \n};\n\n// Check whether the user has provided valid input and generate a warning to show\nconst screenInput = (probeParams) => {\n    if (probeParams.params.temperature > 100.0 || probeParams.params.Temperature < 0.0) {\n        return 'Temperature must be in the range 0-100C.';\n    }\n    if (probeParams.params.magnesium > 0.1) {\n        return 'Magnesium must be in the range 0-100mM';\n    }\n    if (probeParams.params.sodium > 0.5 || probeParams.params.sodium < 0.01) {\n        return 'Sodium must be in the range 10-500mM';\n    }\n    /*const regexp = /^[CAGTcagt]+$/;\n    if (!probeParams.WT.match(regexp) || !probeParams.SNP.match(regexp)) {\n        return 'Input sequences must be DNA, and must consist of A/C/T/G bases.';\n    }*/\n    if (probeParams.WT.length < 10 || probeParams.WT.length > 100) {\n        return 'Sequence lengths must be in the range 0-100 bases.';\n    }\n    if (probeParams.SNP.length < 10 || probeParams.SNP.length > 100) {\n        return 'Sequence lengths must be in the range 0-100 bases.';\n    }\n    return ''; // No warnings\n}\n\nasync function runOptimizer(probeParams, popSize) {\n    var endPoint = endPointAddress.concat('/start_optimizer');\n    return NodeFetch(endPoint,\n    {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n        body: JSON.stringify({'probeParams': probeParams, 'popSize': popSize})\n    }).then(response => {\n        if(response.status >= 400) {\n            throw new Error('Bad response from server')\n        }\n    }).then(function (response) {\n        return response.json();\n    })\n};\n\nconst Optimizer = () => {\n\n    const { probeParams } = useBetween(ShareableProbeParams);\n    const { setRunning } = useBetween(ShareableRunningState);\n    const { setFinished } = useBetween(ShareableFinishedState);\n    const { setOutput } = useBetween(ShareableOutputState);\n    const { popSize } = useBetween(ShareablePopSizeState);\n    const { warning, setWarning } = useBetween(ShareableWarningState);\n\n    // Run on mount\n    useEffect(() => {\n        let mounted = true;\n        if(mounted) {\n            setWarning(screenInput(probeParams));\n            if(warning !== '') {\n                setFinished(false);\n                setRunning(false);\n            }\n        }\n        if(warning === '') {\n            runOptimizer(probeParams, popSize)\n            .then(output => {\n                if(mounted) {\n                    setOutput(output);\n                    setFinished(true);\n                    setRunning(false);\n                }\n            }).catch(err => {\n                console.log(err);\n                setWarning('An error occurred while connecting to the optimization server. Please try again.');\n                setFinished(false);\n                setRunning(false);\n            })\n        }\n        return () => mounted = false;\n    // eslint-disable-next-line \n    }, []);\n\n    return null;\n};\n\nexport default Optimizer;"]},"metadata":{},"sourceType":"module"}