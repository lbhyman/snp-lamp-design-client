{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design/react-app/src/Output.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { useState } from 'react'; //var fetch = require('node-fetch');\n\nimport NodeFetch from 'node-fetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CircularProgressWithLabel(props) {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    display: \"inline-flex\",\n    children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n      variant: \"determinate\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      top: 0,\n      left: 130,\n      bottom: 0,\n      right: 0,\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"progress label\",\n        className: \"proglabel\",\n        children: [props.value, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\n_c = CircularProgressWithLabel;\nCircularProgressWithLabel.propTypes = {\n  value: PropTypes.number.isRequired\n}; // Kill all running intervals\n\nvar killId = setTimeout(function () {\n  for (var i = killId; i > 0; i--) {\n    clearInterval(i);\n  }\n}, 3000);\n\nconst Output = () => {\n  _s();\n\n  const [running, setRunning] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [progress, updateProgress] = useState(0);\n  const [output, updateOutput] = useState({\n    finished: false\n  });\n\n  const getProgress = () => {\n    NodeFetch('http://127.0.0.1:5000/get_progress', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: ''\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      updateProgress(parseInt(json.progress));\n      setRunning(json.running);\n    });\n  };\n\n  const getOutput = () => {\n    NodeFetch('http://127.0.0.1:5000/get_output', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: ''\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      updateOutput(json);\n      setFinished(json.finished);\n    });\n  };\n\n  var mainLoop = setInterval(function () {\n    getProgress();\n    getOutput();\n  }, 10000);\n\n  if (running) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Optimization in Progress...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n        variant: \"determinate\",\n        size: \"150px\",\n        value: progress,\n        className: \"progressbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  } else if (finished) {\n    getOutput();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputsequences\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sequencelabels\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"ProbeF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"ProbeQ: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sink: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sink*: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outsequences\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: output['probeF']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: output['probeQ']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: output['sink']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: output['sinkC']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emptyoutput\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Output, \"yVsPHDZp7BjRyDh09MnSMZdqZfM=\");\n\n_c2 = Output;\nexport default Output;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CircularProgressWithLabel\");\n$RefreshReg$(_c2, \"Output\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design/react-app/src/Output.js"],"names":["PropTypes","CircularProgress","Box","useState","NodeFetch","CircularProgressWithLabel","props","value","propTypes","number","isRequired","killId","setTimeout","i","clearInterval","Output","running","setRunning","finished","setFinished","progress","updateProgress","output","updateOutput","getProgress","headers","method","body","then","response","json","parseInt","getOutput","mainLoop","setInterval"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { useState } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\nfunction CircularProgressWithLabel(props) {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" {...props} />\n            <Box\n                top={0}\n                left={130}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <label for='progress label' className='proglabel'>{props.value}%</label>\n            </Box>\n        </Box>\n    );\n}\nCircularProgressWithLabel.propTypes = {\n    value: PropTypes.number.isRequired,\n};\n\n// Kill all running intervals\nvar killId = setTimeout(function () {\n    for (var i = killId; i > 0; i--) {\n        clearInterval(i);\n    }\n}, 3000);\n\n\n\n\nconst Output = () => {\n    const [running, setRunning] = useState(false);\n    const [finished, setFinished] = useState(false);\n    const [progress, updateProgress] = useState(0);\n    const [output, updateOutput] = useState({ finished: false });\n\n    const getProgress = () => {\n        NodeFetch('http://127.0.0.1:5000/get_progress',\n            {\n                headers: { 'Content-Type': 'application/json' },\n                method: 'POST',\n                body: ''\n            }).then(function (response) {\n                return response.json();\n            }).then(function (json) {\n                updateProgress(parseInt(json.progress));\n                setRunning(json.running);\n            })\n    }\n\n    const getOutput = () => {\n        NodeFetch('http://127.0.0.1:5000/get_output',\n            {\n                headers: { 'Content-Type': 'application/json' },\n                method: 'POST',\n                body: ''\n            }).then(function (response) {\n                return response.json();\n            }).then(function (json) {\n                updateOutput(json);\n                setFinished(json.finished);\n            })\n    }\n\n    var mainLoop = setInterval(function () {\n        getProgress();\n        getOutput();\n    }, 10000);\n\n\n\n    if (running) {\n        return (\n            <div className=\"progress\">\n                <h2>Optimization in Progress...</h2>\n                <CircularProgressWithLabel variant=\"determinate\" size='150px' value={progress} className=\"progressbar\" />\n            </div>\n        );\n    }\n    else if (finished) {\n        getOutput();\n        return (\n            <div className=\"outputsequences\">\n                <h2>Output</h2>\n                <div className=\"sequencelabels\">\n                    <p>ProbeF: </p>\n                    <p>ProbeQ: </p>\n                    <p>Sink: </p>\n                    <p>Sink*: </p>\n                </div>\n                <div className=\"outsequences\">\n                    <p>{output['probeF']}</p>\n                    <p>{output['probeQ']}</p>\n                    <p>{output['sink']}</p>\n                    <p>{output['sinkC']}</p>\n                </div>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"emptyoutput\">\n                <h2>Output</h2>\n            </div>\n        );\n    }\n\n};\n\nexport default Output;"]},"metadata":{},"sourceType":"module"}