{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareablePopSizeState } from './PopSlider.js';\nimport { ShareableProbeParams, ShareableStartSignal, ShareableStopSignal } from './Buttons.js';\nimport NodeFetch from 'node-fetch';\nexport const ShareableRunningState = () => {\n  _s();\n\n  const [running, setRunning] = useState(false);\n  return {\n    running,\n    setRunning\n  };\n};\n\n_s(ShareableRunningState, \"GqSjlWMyRcFSNk6JAdDkMp9357M=\");\n\n_c = ShareableRunningState;\nexport const ShareableFinishedState = () => {\n  _s2();\n\n  const [finished, setFinished] = useState(false);\n  return {\n    finished,\n    setFinished\n  };\n};\n\n_s2(ShareableFinishedState, \"mZBoEqN32gr4012eGv/dCEBa7uo=\");\n\n_c2 = ShareableFinishedState;\nexport const ShareableGAProgressState = () => {\n  _s3();\n\n  const [GAProgress, setGAProgress] = useState(0);\n  return {\n    GAProgress,\n    setGAProgress\n  };\n};\n\n_s3(ShareableGAProgressState, \"NNJRei+Z2luInje77Z08KK60zQE=\");\n\n_c3 = ShareableGAProgressState;\nexport const ShareableOutputState = () => {\n  _s4();\n\n  const [output, setOutput] = useState();\n  return {\n    output,\n    setOutput\n  };\n};\n\n_s4(ShareableOutputState, \"WnuMlFXT1y2OZOxPABl/NBYju+4=\");\n\n_c4 = ShareableOutputState;\n\nconst Optimizer = () => {\n  _s5();\n\n  const {\n    probeParams\n  } = useBetween(ShareableProbeParams);\n  const {\n    startSignal,\n    setStartSignal\n  } = useBetween(ShareableStartSignal);\n  const {\n    stopSignal,\n    setStopSignal\n  } = useBetween(ShareableStopSignal);\n  const {\n    running,\n    setRunning\n  } = useBetween(ShareableRunningState);\n  const {\n    setFinished\n  } = useBetween(ShareableFinishedState);\n  const {\n    GAProgress,\n    setGAProgress\n  } = useBetween(ShareableGAProgressState);\n  const {\n    setOutput\n  } = useBetween(ShareableOutputState);\n  const {\n    popSize\n  } = useBetween(ShareablePopSizeState);\n  const [probePopulation, setProbePopulation] = useState([]);\n  const [finalProbe, setFinalProbe] = useState();\n  const endPointAddress = useState('http://127.0.0.1:8000'); // TODO: Use environment variable\n\n  const reset = () => {\n    setProbePopulation([]);\n    setFinalProbe(null);\n    setRunning(false);\n    setFinished(false);\n    setGAProgress(0);\n    setOutput(null);\n  };\n\n  const generateInitialGAPopulation = () => {\n    var endPoint = endPointAddress.concat('/generate_initial_population');\n    var params = {\n      popSize: popSize,\n      probeParams: probeParams\n    };\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(params)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setProbePopulation(JSON.parse(json));\n    });\n  };\n\n  const generateNextGAPopulation = () => {\n    var endPoint = endPointAddress.concat('/generate_next_population');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(probePopulation)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setProbePopulation(JSON.parse(json));\n    });\n  };\n\n  const generateNextHillClimbingSteps = () => {\n    var endPoint = endPointAddress.concat('/hill_climbing_options');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(probePopulation)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setProbePopulation(JSON.parse(json));\n    });\n  };\n\n  const calculateProbeFitness = probe => {\n    var endPoint = endPointAddress.concat('/calculate_fitness');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(probe)\n    }).then(function (response) {\n      return JSON.parse(response.json());\n    });\n  };\n\n  const calculatePopulationFitness = () => {\n    var currPopulation = probePopulation;\n\n    for (var i = 0; i < currPopulation.length; i++) {\n      if (!running) {\n        reset();\n        return null;\n      }\n\n      var currProbe = currPopulation[i];\n\n      if (currProbe.beta[0] !== 0) {\n        currPopulation[i] = calculateProbeFitness(currProbe);\n      }\n\n      setGAProgress(GAProgress + 1);\n    }\n\n    setProbePopulation(currPopulation);\n  };\n\n  const getBestProbe = () => {\n    var bestProbe = probePopulation[0];\n\n    for (var i = 0; i < probePopulation.length; i++) {\n      var currProbe = probePopulation[i];\n\n      if (currProbe.beta[0] > bestProbe.beta[0]) {\n        bestProbe = currProbe;\n      }\n    }\n\n    return bestProbe;\n  };\n\n  const runGA = () => {\n    generateInitialGAPopulation();\n    calculatePopulationFitness();\n\n    while (probePopulation.length > 1) {\n      generateNextGAPopulation();\n      calculatePopulationFitness();\n    }\n\n    calculatePopulationFitness();\n  };\n\n  const runHillClimbing = () => {\n    var bestProbe = getBestProbe();\n    generateNextHillClimbingSteps();\n    calculatePopulationFitness();\n    var newProbe = getBestProbe();\n\n    while (newProbe.beta[0] > bestProbe.beta[0] && probePopulation.length > 1) {\n      bestProbe = newProbe;\n      generateNextHillClimbingSteps();\n      calculatePopulationFitness();\n      newProbe = getBestProbe();\n    }\n\n    setFinalProbe(bestProbe);\n  };\n\n  const run = () => {\n    reset();\n    setRunning(true);\n    setFinished(false);\n    runGA();\n    runHillClimbing();\n\n    if (probePopulation.length > 0) {\n      setFinished(true);\n      setOutput(finalProbe);\n    }\n\n    setRunning(false);\n  };\n\n  if (startSignal) {\n    setStartSignal(false);\n    run();\n  }\n\n  if (stopSignal) {\n    setStopSignal(false);\n    reset();\n  }\n\n  return null;\n};\n\n_s5(Optimizer, \"lUXqqX4ubRCEKjKvwU0EOHK5mVA=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween, useBetween, useBetween, useBetween, useBetween];\n});\n\n_c5 = Optimizer;\nexport default Optimizer;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ShareableRunningState\");\n$RefreshReg$(_c2, \"ShareableFinishedState\");\n$RefreshReg$(_c3, \"ShareableGAProgressState\");\n$RefreshReg$(_c4, \"ShareableOutputState\");\n$RefreshReg$(_c5, \"Optimizer\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Optimizer.js"],"names":["useState","useBetween","ShareablePopSizeState","ShareableProbeParams","ShareableStartSignal","ShareableStopSignal","NodeFetch","ShareableRunningState","running","setRunning","ShareableFinishedState","finished","setFinished","ShareableGAProgressState","GAProgress","setGAProgress","ShareableOutputState","output","setOutput","Optimizer","probeParams","startSignal","setStartSignal","stopSignal","setStopSignal","popSize","probePopulation","setProbePopulation","finalProbe","setFinalProbe","endPointAddress","reset","generateInitialGAPopulation","endPoint","concat","params","headers","method","body","JSON","stringify","then","response","json","parse","generateNextGAPopulation","generateNextHillClimbingSteps","calculateProbeFitness","probe","calculatePopulationFitness","currPopulation","i","length","currProbe","beta","getBestProbe","bestProbe","runGA","runHillClimbing","newProbe","run"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareablePopSizeState } from './PopSlider.js';\nimport { ShareableProbeParams, ShareableStartSignal, ShareableStopSignal } from './Buttons.js';  \nimport NodeFetch from 'node-fetch';\n\nexport const ShareableRunningState = () => {\n    const [running, setRunning] = useState(false);\n    return {\n        running,\n        setRunning\n    };\n};\n\nexport const ShareableFinishedState = () => {\n    const [finished, setFinished] = useState(false);\n    return {\n        finished,\n        setFinished\n    };\n};\n\nexport const ShareableGAProgressState = () => {\n    const [GAProgress, setGAProgress] = useState(0);\n    return {\n        GAProgress,\n        setGAProgress\n    };    \n};\n\nexport const ShareableOutputState = () => {\n    const [output, setOutput] = useState();\n    return {\n        output,\n        setOutput\n    };    \n};\n\nconst Optimizer = () => {\n\n    const { probeParams } = useBetween(ShareableProbeParams);\n    const { startSignal, setStartSignal } = useBetween(ShareableStartSignal);\n    const { stopSignal, setStopSignal } = useBetween(ShareableStopSignal);\n    const { running, setRunning } = useBetween(ShareableRunningState);\n    const { setFinished } = useBetween(ShareableFinishedState);\n    const { GAProgress, setGAProgress } = useBetween(ShareableGAProgressState);\n    const { setOutput } = useBetween(ShareableOutputState);\n    const { popSize } = useBetween(ShareablePopSizeState);\n    const [probePopulation, setProbePopulation] = useState([])\n    const [finalProbe, setFinalProbe] = useState()\n    const endPointAddress = useState('http://127.0.0.1:8000'); // TODO: Use environment variable\n\n    const reset = () => {\n        setProbePopulation([]);\n        setFinalProbe(null);\n        setRunning(false);\n        setFinished(false);\n        setGAProgress(0);\n        setOutput(null);\n    };\n\n    const generateInitialGAPopulation = () => {\n        var endPoint = endPointAddress.concat('/generate_initial_population');\n        var params = {\n            popSize: popSize,\n            probeParams: probeParams\n        }\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(params)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            setProbePopulation(JSON.parse(json));\n        })\n    };\n\n    const generateNextGAPopulation = () => {\n        var endPoint = endPointAddress.concat('/generate_next_population');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(probePopulation)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            setProbePopulation(JSON.parse(json));\n        })\n    };\n\n    const generateNextHillClimbingSteps = () => {\n        var endPoint = endPointAddress.concat('/hill_climbing_options');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(probePopulation)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            setProbePopulation(JSON.parse(json));\n        })\n    };\n\n    const calculateProbeFitness = (probe) => {\n        var endPoint = endPointAddress.concat('/calculate_fitness');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(probe)\n        }).then(function (response) {\n            return JSON.parse(response.json());\n        })\n    };\n\n    const calculatePopulationFitness = () => {\n        var currPopulation = probePopulation;\n        for (var i=0; i<currPopulation.length; i++) {\n            if(!running) {\n                reset();\n                return null;\n            }\n            var currProbe = currPopulation[i];\n            if (currProbe.beta[0] !== 0) {\n                currPopulation[i] = calculateProbeFitness(currProbe);\n            }\n            setGAProgress(GAProgress + 1);\n        }   \n        setProbePopulation(currPopulation);\n    };\n\n    const getBestProbe = () => {\n        var bestProbe = probePopulation[0];\n        for (var i=0; i<probePopulation.length; i++) {\n            var currProbe = probePopulation[i];\n            if (currProbe.beta[0] > bestProbe.beta[0]) {\n                bestProbe = currProbe;\n            }\n        }\n        return bestProbe;\n    };\n\n    const runGA = () => {\n        generateInitialGAPopulation();\n        calculatePopulationFitness();\n        while (probePopulation.length > 1) {\n            generateNextGAPopulation();\n            calculatePopulationFitness();\n        }\n        calculatePopulationFitness();\n    };\n\n    const runHillClimbing = () => {\n        var bestProbe = getBestProbe();\n        generateNextHillClimbingSteps();\n        calculatePopulationFitness();\n        var newProbe = getBestProbe();\n        while (newProbe.beta[0] > bestProbe.beta[0] && probePopulation.length > 1) {\n            bestProbe = newProbe;\n            generateNextHillClimbingSteps();\n            calculatePopulationFitness();\n            newProbe = getBestProbe();\n        }\n        setFinalProbe(bestProbe);\n    };\n\n    const run = () => {\n        reset();\n        setRunning(true);\n        setFinished(false);\n        runGA();\n        runHillClimbing();\n        if (probePopulation.length > 0) {\n            setFinished(true);\n            setOutput(finalProbe);\n        }\n        setRunning(false);\n    };\n\n    if (startSignal) {\n        setStartSignal(false);\n        run();\n    }\n\n    if (stopSignal) {\n        setStopSignal(false);\n        reset();\n    }\n\n    return null;\n};\n\nexport default Optimizer;"]},"metadata":{},"sourceType":"module"}