{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport NodeFetch from 'node-fetch';\nexport const ShareableRunningState = () => {\n  _s();\n\n  const [running, setRunning] = useState(false);\n  return {\n    running,\n    setRunning\n  };\n};\n\n_s(ShareableRunningState, \"GqSjlWMyRcFSNk6JAdDkMp9357M=\");\n\n_c = ShareableRunningState;\nexport const ShareableFinishedState = () => {\n  _s2();\n\n  const [finished, setFinished] = useState(false);\n  return {\n    finished,\n    setFinished\n  };\n};\n\n_s2(ShareableFinishedState, \"mZBoEqN32gr4012eGv/dCEBa7uo=\");\n\n_c2 = ShareableFinishedState;\nexport const ShareableGAProgressState = () => {\n  _s3();\n\n  const [GAProgress, setGAProgress] = useState(0);\n  return {\n    GAProgress,\n    setGAProgress\n  };\n};\n\n_s3(ShareableGAProgressState, \"NNJRei+Z2luInje77Z08KK60zQE=\");\n\n_c3 = ShareableGAProgressState;\nexport const ShareableOutputState = () => {\n  _s4();\n\n  const [output, setOutput] = useState();\n  return {\n    output,\n    setOutput\n  };\n};\n\n_s4(ShareableOutputState, \"WnuMlFXT1y2OZOxPABl/NBYju+4=\");\n\n_c4 = ShareableOutputState;\n\nconst Optimizer = () => {\n  _s5();\n\n  const [probeParams, setProbeParams] = useState({});\n  const [popSize, setPopSize] = useState(0);\n  const [probePopulation, setProbePopulation] = useState([]);\n  const [finalProbe, setFinalProbe] = useState(null);\n  const [running, setRunning] = useBetween(ShareableRunningState);\n  const [finished, setFinished] = useBetween(ShareableFinishedState);\n  const [GAProgress, setGAProgress] = useBetween(ShareableGAProgressState);\n  const [output, setOutput] = useBetween(ShareableOutputState);\n  const endPointAddress = 'http://127.0.0.1:5000'; // TODO: Use environment variable\n\n  reset();\n\n  reset = () => {\n    setProbePopulation([]);\n    setRunning(false);\n    setFinished(false);\n    setGAProgress(0);\n    setOutput(null);\n  };\n\n  generateInitialGAPopulation = () => {\n    var endPoint = this.endPointAddress.concat('/generate_initial_population');\n    var params = {\n      popSize: popSize,\n      probeParams: probeParams\n    };\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(params)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      this.probePopulation = JSON.parse(json);\n    });\n  };\n\n  generateNextGAPopulation = () => {\n    var endPoint = endPointAddress.concat('/generate_next_population');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(probePopulation)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      probePopulation = JSON.parse(json);\n    });\n  };\n\n  generateNextHillClimbingSteps = () => {\n    var endPoint = endPointAddress.concat('/hill_climbing_options');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(probePopulation)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setProbePopulation(JSON.parse(json));\n    });\n  };\n\n  calculateProbeFitness = probe => {\n    var endPoint = endPointAddress.concat('/calculate_fitness');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(probe)\n    }).then(function (response) {\n      return JSON.parse(response.json());\n    });\n  };\n\n  calculatePopulationFitness = () => {\n    var currPopulation = probePopulation;\n\n    for (var i = 0; i < currPopulation.length; i++) {\n      if (!running) {\n        reset();\n        return null;\n      }\n\n      var currProbe = currPopulation[i];\n\n      if (currProbe.beta[0] != 0) {\n        currPopulation[i] = calculateProbeFitness(currProbe);\n      }\n\n      setGAProgress(GAProgress + 1);\n    }\n\n    setProbePopulation(currPopulation);\n  };\n\n  getBestProbe = () => {\n    var bestProbe = probePopulation[0];\n\n    for (var i = 0; i < probePopulation.length; i++) {\n      var currProbe = probePopulation[i];\n\n      if (currProbe.beta[0] > bestProbe.beta[0]) {\n        bestProbe = currProbe;\n      }\n    }\n\n    return bestProbe;\n  };\n\n  runGA = () => {\n    generateInitialGAPopulation();\n    calculatePopulationFitness();\n\n    while (probePopulation.length > 1) {\n      generateNextGAPopulation();\n      calculatePopulationFitness();\n    }\n\n    calculatePopulationFitness();\n  };\n\n  runHillClimbing = () => {\n    var bestProbe = this.getBestProbe();\n    this.generateNextHillClimbingSteps();\n    this.calculatePopulationFitness();\n    var newProbe = this.getBestProbe();\n\n    while (newProbe.beta[0] > bestProbe.beta[0] && this.probePopulation.length > 1) {\n      bestProbe = newProbe;\n      this.generateNextHillClimbingSteps();\n      this.calculatePopulationFitness();\n      var newProbe = this.getBestProbe();\n    }\n\n    this.finalProbe = bestProbe;\n  };\n\n  run = () => {\n    setRunning(true);\n    setFinished(false);\n    this.runGA();\n    this.runHillClimbing();\n\n    if (this.probePopulation.length > 0) {\n      setFinished(true);\n      setOutput(this.finalProbe);\n    }\n\n    setRunning(false);\n  };\n};\n\n_s5(Optimizer, \"aZBs5MVvjK0AA2eVASSPCg6KJ4k=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween];\n});\n\n_c5 = Optimizer;\nexport default Optimizer;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ShareableRunningState\");\n$RefreshReg$(_c2, \"ShareableFinishedState\");\n$RefreshReg$(_c3, \"ShareableGAProgressState\");\n$RefreshReg$(_c4, \"ShareableOutputState\");\n$RefreshReg$(_c5, \"Optimizer\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Optimizer.js"],"names":["useState","useBetween","NodeFetch","ShareableRunningState","running","setRunning","ShareableFinishedState","finished","setFinished","ShareableGAProgressState","GAProgress","setGAProgress","ShareableOutputState","output","setOutput","Optimizer","probeParams","setProbeParams","popSize","setPopSize","probePopulation","setProbePopulation","finalProbe","setFinalProbe","endPointAddress","reset","generateInitialGAPopulation","endPoint","concat","params","headers","method","body","JSON","stringify","then","response","json","parse","generateNextGAPopulation","generateNextHillClimbingSteps","calculateProbeFitness","probe","calculatePopulationFitness","currPopulation","i","length","currProbe","beta","getBestProbe","bestProbe","runGA","runHillClimbing","newProbe","run"],"mappings":";;;;;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AACvC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,SAAO;AACHI,IAAAA,OADG;AAEHC,IAAAA;AAFG,GAAP;AAIH,CANM;;GAAMF,qB;;KAAAA,qB;AAQb,OAAO,MAAMG,sBAAsB,GAAG,MAAM;AAAA;;AACxC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,SAAO;AACHO,IAAAA,QADG;AAEHC,IAAAA;AAFG,GAAP;AAIH,CANM;;IAAMF,sB;;MAAAA,sB;AAQb,OAAO,MAAMG,wBAAwB,GAAG,MAAM;AAAA;;AAC1C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAD,CAA5C;AACA,SAAO;AACHU,IAAAA,UADG;AAEHC,IAAAA;AAFG,GAAP;AAIH,CANM;;IAAMF,wB;;MAAAA,wB;AAQb,OAAO,MAAMG,oBAAoB,GAAG,MAAM;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,EAApC;AACA,SAAO;AACHa,IAAAA,MADG;AAEHC,IAAAA;AAFG,GAAP;AAIH,CANM;;IAAMF,oB;;MAAAA,oB;;AAQb,MAAMG,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACoB,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBJ,UAAU,CAACE,qBAAD,CAAxC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,UAAU,CAACK,sBAAD,CAA1C;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BV,UAAU,CAACQ,wBAAD,CAA9C;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBb,UAAU,CAACW,oBAAD,CAAtC;AACA,QAAMY,eAAe,GAAG,uBAAxB,CAVoB,CAU6B;;AACjDC,EAAAA,KAAK;;AAELA,EAAAA,KAAK,GAAG,MAAM;AACVJ,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAhB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAG,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAG,IAAAA,aAAa,CAAC,CAAD,CAAb;AACAG,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAND;;AAQAY,EAAAA,2BAA2B,GAAG,MAAM;AAChC,QAAIC,QAAQ,GAAG,KAAKH,eAAL,CAAqBI,MAArB,CAA4B,8BAA5B,CAAf;AACA,QAAIC,MAAM,GAAG;AACTX,MAAAA,OAAO,EAAEA,OADA;AAETF,MAAAA,WAAW,EAAEA;AAFJ,KAAb;AAIAd,IAAAA,SAAS,CAACyB,QAAD,EACT;AACIG,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADb;AAEIC,MAAAA,MAAM,EAAE,MAFZ;AAGIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AAHV,KADS,CAAT,CAKGM,IALH,CAKQ,UAAUC,QAAV,EAAoB;AACxB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAPD,EAOGF,IAPH,CAOQ,UAAUE,IAAV,EAAgB;AACpB,WAAKjB,eAAL,GAAuBa,IAAI,CAACK,KAAL,CAAWD,IAAX,CAAvB;AACH,KATD;AAUH,GAhBD;;AAkBAE,EAAAA,wBAAwB,GAAG,MAAM;AAC7B,QAAIZ,QAAQ,GAAGH,eAAe,CAACI,MAAhB,CAAuB,2BAAvB,CAAf;AACA1B,IAAAA,SAAS,CAACyB,QAAD,EACT;AACIG,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADb;AAEIC,MAAAA,MAAM,EAAE,MAFZ;AAGIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,eAAf;AAHV,KADS,CAAT,CAKGe,IALH,CAKQ,UAAUC,QAAV,EAAoB;AACxB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAPD,EAOGF,IAPH,CAOQ,UAAUE,IAAV,EAAgB;AACpBjB,MAAAA,eAAe,GAAGa,IAAI,CAACK,KAAL,CAAWD,IAAX,CAAlB;AACH,KATD;AAUH,GAZD;;AAcAG,EAAAA,6BAA6B,GAAG,MAAM;AAClC,QAAIb,QAAQ,GAAGH,eAAe,CAACI,MAAhB,CAAuB,wBAAvB,CAAf;AACA1B,IAAAA,SAAS,CAACyB,QAAD,EACT;AACIG,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADb;AAEIC,MAAAA,MAAM,EAAE,MAFZ;AAGIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,eAAf;AAHV,KADS,CAAT,CAKGe,IALH,CAKQ,UAAUC,QAAV,EAAoB;AACxB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAPD,EAOGF,IAPH,CAOQ,UAAUE,IAAV,EAAgB;AACpBhB,MAAAA,kBAAkB,CAACY,IAAI,CAACK,KAAL,CAAWD,IAAX,CAAD,CAAlB;AACH,KATD;AAUH,GAZD;;AAcAI,EAAAA,qBAAqB,GAAIC,KAAD,IAAW;AAC/B,QAAIf,QAAQ,GAAGH,eAAe,CAACI,MAAhB,CAAuB,oBAAvB,CAAf;AACA1B,IAAAA,SAAS,CAACyB,QAAD,EACT;AACIG,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADb;AAEIC,MAAAA,MAAM,EAAE,MAFZ;AAGIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeQ,KAAf;AAHV,KADS,CAAT,CAKGP,IALH,CAKQ,UAAUC,QAAV,EAAoB;AACxB,aAAOH,IAAI,CAACK,KAAL,CAAWF,QAAQ,CAACC,IAAT,EAAX,CAAP;AACH,KAPD;AAQH,GAVD;;AAYAM,EAAAA,0BAA0B,GAAG,MAAM;AAC/B,QAAIC,cAAc,GAAGxB,eAArB;;AACA,SAAK,IAAIyB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,cAAc,CAACE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,UAAG,CAACzC,OAAJ,EAAa;AACTqB,QAAAA,KAAK;AACL,eAAO,IAAP;AACH;;AACD,UAAIsB,SAAS,GAAGH,cAAc,CAACC,CAAD,CAA9B;;AACA,UAAIE,SAAS,CAACC,IAAV,CAAe,CAAf,KAAqB,CAAzB,EAA4B;AACxBJ,QAAAA,cAAc,CAACC,CAAD,CAAd,GAAoBJ,qBAAqB,CAACM,SAAD,CAAzC;AACH;;AACDpC,MAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACH;;AACDW,IAAAA,kBAAkB,CAACuB,cAAD,CAAlB;AACH,GAdD;;AAgBAK,EAAAA,YAAY,GAAG,MAAM;AACjB,QAAIC,SAAS,GAAG9B,eAAe,CAAC,CAAD,CAA/B;;AACA,SAAK,IAAIyB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACzB,eAAe,CAAC0B,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAIE,SAAS,GAAG3B,eAAe,CAACyB,CAAD,CAA/B;;AACA,UAAIE,SAAS,CAACC,IAAV,CAAe,CAAf,IAAoBE,SAAS,CAACF,IAAV,CAAe,CAAf,CAAxB,EAA2C;AACvCE,QAAAA,SAAS,GAAGH,SAAZ;AACH;AACJ;;AACD,WAAOG,SAAP;AACH,GATD;;AAWAC,EAAAA,KAAK,GAAG,MAAM;AACVzB,IAAAA,2BAA2B;AAC3BiB,IAAAA,0BAA0B;;AAC1B,WAAOvB,eAAe,CAAC0B,MAAhB,GAAyB,CAAhC,EAAmC;AAC/BP,MAAAA,wBAAwB;AACxBI,MAAAA,0BAA0B;AAC7B;;AACDA,IAAAA,0BAA0B;AAC7B,GARD;;AAUAS,EAAAA,eAAe,GAAG,MAAM;AACpB,QAAIF,SAAS,GAAG,KAAKD,YAAL,EAAhB;AACA,SAAKT,6BAAL;AACA,SAAKG,0BAAL;AACA,QAAIU,QAAQ,GAAG,KAAKJ,YAAL,EAAf;;AACA,WAAOI,QAAQ,CAACL,IAAT,CAAc,CAAd,IAAmBE,SAAS,CAACF,IAAV,CAAe,CAAf,CAAnB,IAAwC,KAAK5B,eAAL,CAAqB0B,MAArB,GAA8B,CAA7E,EAAgF;AAC5EI,MAAAA,SAAS,GAAGG,QAAZ;AACA,WAAKb,6BAAL;AACA,WAAKG,0BAAL;AACA,UAAIU,QAAQ,GAAG,KAAKJ,YAAL,EAAf;AACH;;AACD,SAAK3B,UAAL,GAAkB4B,SAAlB;AACH,GAZD;;AAcAI,EAAAA,GAAG,GAAG,MAAM;AACRjD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,SAAK2C,KAAL;AACA,SAAKC,eAAL;;AACA,QAAI,KAAKhC,eAAL,CAAqB0B,MAArB,GAA8B,CAAlC,EAAqC;AACjCtC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAM,MAAAA,SAAS,CAAC,KAAKQ,UAAN,CAAT;AACH;;AACDjB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAVD;AAWH,CA7ID;;IAAMU,S;UAM4Bd,U,EACEA,U,EACIA,U,EACRA,U;;;MAT1Bc,S;AA+IN,eAAeA,SAAf","sourcesContent":["\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport NodeFetch from 'node-fetch';\n\nexport const ShareableRunningState = () => {\n    const [running, setRunning] = useState(false);\n    return {\n        running,\n        setRunning\n    }\n}\n\nexport const ShareableFinishedState = () => {\n    const [finished, setFinished] = useState(false);\n    return {\n        finished,\n        setFinished\n    }\n}\n\nexport const ShareableGAProgressState = () => {\n    const [GAProgress, setGAProgress] = useState(0);\n    return {\n        GAProgress,\n        setGAProgress\n    }    \n}\n\nexport const ShareableOutputState = () => {\n    const [output, setOutput] = useState();\n    return {\n        output,\n        setOutput\n    }    \n}\n\nconst Optimizer = () => {\n\n    const [probeParams, setProbeParams] = useState({});\n    const [popSize, setPopSize] = useState(0);\n    const [probePopulation, setProbePopulation] = useState([]);\n    const [finalProbe, setFinalProbe] = useState(null);\n    const [running, setRunning] = useBetween(ShareableRunningState);\n    const [finished, setFinished] = useBetween(ShareableFinishedState);\n    const [GAProgress, setGAProgress] = useBetween(ShareableGAProgressState);\n    const [output, setOutput] = useBetween(ShareableOutputState);\n    const endPointAddress = 'http://127.0.0.1:5000'; // TODO: Use environment variable\n    reset();\n\n    reset = () => {\n        setProbePopulation([]);\n        setRunning(false);\n        setFinished(false);\n        setGAProgress(0);\n        setOutput(null);\n    };\n\n    generateInitialGAPopulation = () => {\n        var endPoint = this.endPointAddress.concat('/generate_initial_population');\n        var params = {\n            popSize: popSize,\n            probeParams: probeParams\n        }\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(params)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            this.probePopulation = JSON.parse(json);\n        })\n    };\n\n    generateNextGAPopulation = () => {\n        var endPoint = endPointAddress.concat('/generate_next_population');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(probePopulation)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            probePopulation = JSON.parse(json);\n        })\n    };\n\n    generateNextHillClimbingSteps = () => {\n        var endPoint = endPointAddress.concat('/hill_climbing_options');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(probePopulation)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            setProbePopulation(JSON.parse(json));\n        })\n    };\n\n    calculateProbeFitness = (probe) => {\n        var endPoint = endPointAddress.concat('/calculate_fitness');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(probe)\n        }).then(function (response) {\n            return JSON.parse(response.json());\n        })\n    };\n\n    calculatePopulationFitness = () => {\n        var currPopulation = probePopulation;\n        for (var i=0; i<currPopulation.length; i++) {\n            if(!running) {\n                reset();\n                return null;\n            }\n            var currProbe = currPopulation[i];\n            if (currProbe.beta[0] != 0) {\n                currPopulation[i] = calculateProbeFitness(currProbe);\n            }\n            setGAProgress(GAProgress + 1);\n        }\n        setProbePopulation(currPopulation);    \n    };\n\n    getBestProbe = () => {\n        var bestProbe = probePopulation[0];\n        for (var i=0; i<probePopulation.length; i++) {\n            var currProbe = probePopulation[i];\n            if (currProbe.beta[0] > bestProbe.beta[0]) {\n                bestProbe = currProbe;\n            }\n        }\n        return bestProbe;\n    };\n\n    runGA = () => {\n        generateInitialGAPopulation();\n        calculatePopulationFitness();\n        while (probePopulation.length > 1) {\n            generateNextGAPopulation();\n            calculatePopulationFitness();\n        }\n        calculatePopulationFitness();\n    };\n\n    runHillClimbing = () => {\n        var bestProbe = this.getBestProbe();\n        this.generateNextHillClimbingSteps();\n        this.calculatePopulationFitness();\n        var newProbe = this.getBestProbe();\n        while (newProbe.beta[0] > bestProbe.beta[0] && this.probePopulation.length > 1) {\n            bestProbe = newProbe;\n            this.generateNextHillClimbingSteps();\n            this.calculatePopulationFitness();\n            var newProbe = this.getBestProbe();\n        }\n        this.finalProbe = bestProbe;\n    };\n\n    run = () => {\n        setRunning(true);\n        setFinished(false);\n        this.runGA();\n        this.runHillClimbing();\n        if (this.probePopulation.length > 0) {\n            setFinished(true);\n            setOutput(this.finalProbe);\n        }\n        setRunning(false);\n    };\n};\n\nexport default Optimizer;"]},"metadata":{},"sourceType":"module"}