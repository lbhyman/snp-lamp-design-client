{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design/react-app/src/SequenceEntry.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; //var fetch = require('node-fetch');\n\nimport NodeFetch from 'node-fetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SequenceEntry = () => {\n  _s();\n\n  const [WT, setWT] = useState();\n  const [SNP, setSNP] = useState();\n\n  const sendUpdate = () => {\n    var data = {\n      'WT': WT,\n      'SNP': SNP\n    };\n    NodeFetch('http://127.0.0.1:5000/send_input', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return response.text();\n    });\n  };\n\n  const handleWT = (event, newValue) => {\n    setWT(newValue);\n    sendUpdate();\n  };\n\n  const handleSNP = (event, newValue) => {\n    setSNP(newValue);\n    sendUpdate();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sequenceentry\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"seq-form\",\n      id: \"non-mut-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"non-mut\",\n        children: \"WT Sequence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"non-mut\",\n        name: \"non-mut\",\n        onChange: handleWT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"seq-form\",\n      id: \"mut-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"mut\",\n        children: \"Mutated Sequence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"mut\",\n        name: \"mut\",\n        onChange: handleSNP\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SequenceEntry, \"5PEEdtp+baAhMtG/hOlJZ5t0YNw=\");\n\n_c = SequenceEntry;\nexport default SequenceEntry;\n\nvar _c;\n\n$RefreshReg$(_c, \"SequenceEntry\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design/react-app/src/SequenceEntry.js"],"names":["useState","NodeFetch","SequenceEntry","WT","setWT","SNP","setSNP","sendUpdate","data","headers","method","body","JSON","stringify","then","response","text","handleWT","event","newValue","handleSNP"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcJ,QAAQ,EAA5B;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,EAA9B;;AAEA,QAAMO,UAAU,GAAG,MAAM;AACrB,QAAIC,IAAI,GAAG;AAAC,YAAML,EAAP;AAAW,aAAOE;AAAlB,KAAX;AAEAJ,IAAAA,SAAS,CAAC,kCAAD,EACf;AAACQ,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAAV;AACAC,MAAAA,MAAM,EAAE,MADR;AAEAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAFN,KADe,CAAT,CAIGM,IAJH,CAIQ,UAAUC,QAAV,EAAoB;AACxB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAND;AAOH,GAVD;;AAYA,QAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAClCf,IAAAA,KAAK,CAACe,QAAD,CAAL;AACAZ,IAAAA,UAAU;AACb,GAHD;;AAKA,QAAMa,SAAS,GAAG,CAACF,KAAD,EAAQC,QAAR,KAAqB;AACnCb,IAAAA,MAAM,CAACa,QAAD,CAAN;AACAZ,IAAAA,UAAU;AACb,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI;AAAK,MAAA,KAAK,EAAC,UAAX;AAAsB,MAAA,EAAE,EAAC,cAAzB;AAAA,8BACI;AAAO,QAAA,GAAG,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,SAAtB;AAAgC,QAAA,IAAI,EAAC,SAArC;AAA+C,QAAA,QAAQ,EAAEU;AAAzD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,KAAK,EAAC,UAAX;AAAsB,MAAA,EAAE,EAAC,UAAzB;AAAA,8BACI;AAAO,QAAA,GAAG,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,KAAtB;AAA4B,QAAA,IAAI,EAAC,KAAjC;AAAuC,QAAA,QAAQ,EAAEG;AAAjD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAtCD;;GAAMlB,a;;KAAAA,a;AAwCN,eAAeA,aAAf","sourcesContent":["import { useState } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\n\nconst SequenceEntry = () => {\n    const [WT, setWT] = useState();\n    const [SNP, setSNP] = useState();\n\n    const sendUpdate = () => {\n        var data = {'WT': WT, 'SNP': SNP};\n\n        NodeFetch('http://127.0.0.1:5000/send_input', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(data)\n        }).then(function (response) {\n            return response.text();\n        })\n    }\n\n    const handleWT = (event, newValue) => {\n        setWT(newValue);\n        sendUpdate();\n    };\n\n    const handleSNP = (event, newValue) => {\n        setSNP(newValue);\n        sendUpdate();\n    };\n\n    return (\n        <div className=\"sequenceentry\">\n            <div class=\"seq-form\" id=\"non-mut-form\">\n                <label for=\"non-mut\">WT Sequence</label>\n                <input type=\"text\" id=\"non-mut\" name=\"non-mut\" onChange={handleWT} />\n            </div>\n            <div class=\"seq-form\" id=\"mut-form\">\n                <label for=\"mut\">Mutated Sequence</label>\n                <input type=\"text\" id=\"mut\" name=\"mut\" onChange={handleSNP} />\n            </div>\n        </div>\n    );\n};\n\nexport default SequenceEntry;"]},"metadata":{},"sourceType":"module"}