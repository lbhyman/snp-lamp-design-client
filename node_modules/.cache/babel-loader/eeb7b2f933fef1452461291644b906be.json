{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareableProbeParams } from './Buttons.js'; //import useInterval from './useInterval.js';\n\nimport NodeFetch from 'node-fetch';\nexport const ShareableRunningState = () => {\n  _s();\n\n  const [running, setRunning] = useState(false);\n  return {\n    running,\n    setRunning\n  };\n};\n\n_s(ShareableRunningState, \"GqSjlWMyRcFSNk6JAdDkMp9357M=\");\n\n_c = ShareableRunningState;\nexport const ShareableFinishedState = () => {\n  _s2();\n\n  const [finished, setFinished] = useState(false);\n  return {\n    finished,\n    setFinished\n  };\n};\n\n_s2(ShareableFinishedState, \"mZBoEqN32gr4012eGv/dCEBa7uo=\");\n\n_c2 = ShareableFinishedState;\nexport const ShareableOutputState = () => {\n  _s3();\n\n  const [output, setOutput] = useState(null);\n  return {\n    output,\n    setOutput\n  };\n};\n\n_s3(ShareableOutputState, \"ppWByPgNJ+PeYTAdgwjKOSbvJUE=\");\n\n_c3 = ShareableOutputState;\nexport const ShareableWarningState = () => {\n  _s4();\n\n  const [warning, setWarning] = useState('');\n  return {\n    warning,\n    setWarning\n  };\n};\n\n_s4(ShareableWarningState, \"QgWVaa52qMHZiqsy7aSwVP0Ecac=\");\n\n_c4 = ShareableWarningState;\n\nasync function runOptimizer(finalParams) {\n  var endPoint = process.env.REACT_APP_ENDPOINTADDRESS.concat('/start_optimizer');\n  finalParams.params.temperature = parseFloat(finalParams.params.temperature);\n  finalParams.params.sodium = parseFloat(finalParams.params.sodium) / 1000.0;\n  finalParams.params.magnesium = parseFloat(finalParams.params.magnesium) / 1000.0;\n  return NodeFetch(endPoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      'probeParams': finalParams\n    })\n  }).then(response => {\n    // AWS API Gateway will generally timeout before the optimizer is finished. This is normal behavior.\n    if (response.status === 408 || response.status === 504) {\n      return {\n        running: 'true'\n      };\n    } // Other errors when connecting to AWS\n    else if (response.status >= 400) {\n        return {\n          running: 'true'\n        };\n      } else {\n        return response.json();\n      }\n  });\n}\n/*\nasync function getOutput(finalParams, attempt, maxAttempts) {\n    var endPoint = process.env.REACT_APP_ENDPOINTADDRESS.concat('/get_output');\n    finalParams.params.temperature = parseFloat(finalParams.params.temperature);\n    finalParams.params.sodium = parseFloat(finalParams.params.sodium);\n    finalParams.params.magnesium = parseFloat(finalParams.params.magnesium);\n    return NodeFetch(endPoint,\n    {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n        body: JSON.stringify({'probeParams': finalParams})\n    }).then(response => {\n        if(response.status >= 400 && attempt > maxAttempts) {\n            throw new Error('Bad response from server');\n        }\n        else if (response.status >= 400) { \n            return {status: 'error'};\n        }\n        else {\n            return response.json();\n        }\n    })    \n}*/\n\n\nconst Optimizer = () => {\n  _s5();\n\n  //const maxReattempts = 5;\n  const {\n    probeParams\n  } = useBetween(ShareableProbeParams);\n  const {\n    running,\n    setRunning\n  } = useBetween(ShareableRunningState);\n  const {\n    setFinished\n  } = useBetween(ShareableFinishedState);\n  const {\n    setOutput\n  } = useBetween(ShareableOutputState);\n  const {\n    setWarning\n  } = useBetween(ShareableWarningState); //const [attempts, ] = useState(0);\n\n  const [finalParams] = useState(JSON.parse(JSON.stringify(probeParams)));\n  const [startTime, setStartTime] = useState(0); // Run on mount\n\n  useEffect(() => {\n    let mounted = true;\n    setStartTime(Date.now()); // Start Optimizer\n\n    runOptimizer(finalParams).then(output => {\n      if (mounted) {\n        setOutput(output);\n        setFinished(true);\n        setRunning(false);\n      }\n    }).catch(err => {\n      console.log(err);\n      setWarning('Optimization run timed out. Please try again.');\n    });\n    return () => {\n      mounted = false;\n    }; // eslint-disable-next-line \n  }, []); // Periodically check output\n\n  /*useInterval(() => {\n      var elapsedTime = Date.now() - startTime;\n      getOutput(finalParams, attempts, maxReattempts)\n      .then(output => {\n          if(output.running === 'false') { \n              console.log('done');\n              setOutput(output);\n              setFinished(true);\n              setRunning(false);\n              console.log(running);\n          }\n          // Timeout after 5 minutes\n          else if(elapsedTime > 300000) {\n              throw new Error('Optimization run timeout');\n          }\n      })\n      .catch(err => {\n          console.log(err);\n          if(elapsedTime > 300000) {\n              setWarning('Optimization run timed out. Please try again.');\n              setFinished(false);\n              setRunning(false);\n          }   \n      });\n  }, 5000);*/\n\n  return null;\n};\n\n_s5(Optimizer, \"Nu/WsWN7WtqwpR5HJq4cvL8mRuM=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween, useBetween];\n});\n\n_c5 = Optimizer;\nexport default Optimizer;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ShareableRunningState\");\n$RefreshReg$(_c2, \"ShareableFinishedState\");\n$RefreshReg$(_c3, \"ShareableOutputState\");\n$RefreshReg$(_c4, \"ShareableWarningState\");\n$RefreshReg$(_c5, \"Optimizer\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Optimizer.js"],"names":["useState","useEffect","useBetween","ShareableProbeParams","NodeFetch","ShareableRunningState","running","setRunning","ShareableFinishedState","finished","setFinished","ShareableOutputState","output","setOutput","ShareableWarningState","warning","setWarning","runOptimizer","finalParams","endPoint","process","env","REACT_APP_ENDPOINTADDRESS","concat","params","temperature","parseFloat","sodium","magnesium","headers","method","body","JSON","stringify","then","response","status","json","Optimizer","probeParams","parse","startTime","setStartTime","mounted","Date","now","catch","err","console","log"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareableProbeParams } from './Buttons.js';\n//import useInterval from './useInterval.js';\nimport NodeFetch from 'node-fetch';\n\nexport const ShareableRunningState = () => {\n    const [running, setRunning] = useState(false);\n    return {\n        running,\n        setRunning\n    };\n};\n\nexport const ShareableFinishedState = () => {\n    const [finished, setFinished] = useState(false);\n    return {\n        finished,\n        setFinished\n    };\n};\n\nexport const ShareableOutputState = () => {\n    const [output, setOutput] = useState(null);\n    return {\n        output,\n        setOutput\n    };    \n};\n\nexport const ShareableWarningState = () => {\n    const [warning, setWarning] = useState('');\n    return {\n        warning,\n        setWarning\n    };    \n};\n\nasync function runOptimizer(finalParams) {\n    var endPoint = process.env.REACT_APP_ENDPOINTADDRESS.concat('/start_optimizer');\n    finalParams.params.temperature = parseFloat(finalParams.params.temperature);\n    finalParams.params.sodium = parseFloat(finalParams.params.sodium)/1000.0;\n    finalParams.params.magnesium = parseFloat(finalParams.params.magnesium)/1000.0;\n    return NodeFetch(endPoint,\n    {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n        body: JSON.stringify({'probeParams': finalParams})\n    }).then(response => {\n        // AWS API Gateway will generally timeout before the optimizer is finished. This is normal behavior.\n        if(response.status === 408 || response.status === 504) {\n            return {running: 'true'};\n        }\n        // Other errors when connecting to AWS\n        else if(response.status >= 400) {\n            return {running: 'true'};\n        }\n        else {\n            return response.json();\n        }\n    })\n}\n/*\nasync function getOutput(finalParams, attempt, maxAttempts) {\n    var endPoint = process.env.REACT_APP_ENDPOINTADDRESS.concat('/get_output');\n    finalParams.params.temperature = parseFloat(finalParams.params.temperature);\n    finalParams.params.sodium = parseFloat(finalParams.params.sodium);\n    finalParams.params.magnesium = parseFloat(finalParams.params.magnesium);\n    return NodeFetch(endPoint,\n    {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n        body: JSON.stringify({'probeParams': finalParams})\n    }).then(response => {\n        if(response.status >= 400 && attempt > maxAttempts) {\n            throw new Error('Bad response from server');\n        }\n        else if (response.status >= 400) { \n            return {status: 'error'};\n        }\n        else {\n            return response.json();\n        }\n    })    \n}*/\n\nconst Optimizer = () => {\n\n    //const maxReattempts = 5;\n\n    const { probeParams } = useBetween(ShareableProbeParams);\n    const { running, setRunning } = useBetween(ShareableRunningState);\n    const { setFinished } = useBetween(ShareableFinishedState);\n    const { setOutput } = useBetween(ShareableOutputState);\n    const { setWarning } = useBetween(ShareableWarningState);\n    //const [attempts, ] = useState(0);\n    const [finalParams, ] = useState(JSON.parse(JSON.stringify(probeParams)));\n    const [startTime, setStartTime] = useState(0);\n\n    // Run on mount\n    useEffect(() => {\n        let mounted = true;\n        setStartTime(Date.now());\n        // Start Optimizer\n        runOptimizer(finalParams)\n        .then(output => {\n            if(mounted) {\n                setOutput(output);\n                setFinished(true);\n                setRunning(false);\n            }\n        }).catch(err => {\n            console.log(err);\n            setWarning('Optimization run timed out. Please try again.');\n        })\n\n        return () => {\n            mounted = false;\n        }\n    // eslint-disable-next-line \n    }, []);\n\n    // Periodically check output\n    /*useInterval(() => {\n        var elapsedTime = Date.now() - startTime;\n        getOutput(finalParams, attempts, maxReattempts)\n        .then(output => {\n            if(output.running === 'false') { \n                console.log('done');\n                setOutput(output);\n                setFinished(true);\n                setRunning(false);\n                console.log(running);\n            }\n            // Timeout after 5 minutes\n            else if(elapsedTime > 300000) {\n                throw new Error('Optimization run timeout');\n            }\n        })\n        .catch(err => {\n            console.log(err);\n            if(elapsedTime > 300000) {\n                setWarning('Optimization run timed out. Please try again.');\n                setFinished(false);\n                setRunning(false);\n            }   \n        });\n    }, 5000);*/\n\n    return null;\n};\n\nexport default Optimizer;"]},"metadata":{},"sourceType":"module"}