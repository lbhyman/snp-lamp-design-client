{"version":3,"sources":["SequenceEntry.js","ConditionEntry.js","PopSlider.js","Buttons.js","Output.js","App.js","reportWebVitals.js","index.js"],"names":["SequenceEntry","useState","WT","SNP","sendUpdate","data","NodeFetch","headers","method","body","JSON","stringify","then","response","text","className","class","id","for","type","value","name","onChange","i","target","j","ConditionEntry","temperature","setTemperature","sodium","setSodium","magnesium","setMagnesium","parseFloat","event","newValue","valuetext","PopSlider","Math","log2","setValue","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","scale","x","min","max","Buttons","running","setRunning","Button","variant","color","onClick","disabled","CircularProgressWithLabel","props","Box","position","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","Output","finished","setFinished","progress","updateProgress","output","updateOutput","getOutput","json","useEffect","interval","setInterval","parseInt","clearInterval","size","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f009aa00.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { useEffect } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\n\nconst SequenceEntry = () => {\n    const [WT, setWT] = useState();\n    const [SNP, setSNP] = useState();\n\n    const sendUpdate = (data) => {\n        //var data = {'WT': WT, 'SNP': SNP};\n\n        NodeFetch('http://127.0.0.1:5000/send_input', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(data)\n        }).then(function (response) {\n            return response.text();\n        })\n    }\n\n    /*\n    const handleWT = (event, newValue) => {\n        setWT(newValue);\n        sendUpdate();\n    };\n\n    const handleSNP = (event, newValue) => {\n        setSNP(newValue);\n        sendUpdate();\n    };*/\n\n    /*useEffect(() => {\n        const interval2 = setInterval(() => {\n            sendUpdate();\n        }, 1000);\n        return () => {\n          clearInterval(interval2);\n        };\n      }, []);*/\n\n    return (\n        <div className=\"sequenceentry\">\n            <div class=\"seq-form\" id=\"non-mut-form\">\n                <label for=\"non-mut\">WT Sequence</label>\n                <input type=\"text\" value={WT} id=\"non-mut\" name=\"non-mut\" onChange={i => sendUpdate({'WT': i.target.value})} />\n            </div>\n            <div class=\"seq-form\" id=\"mut-form\">\n                <label for=\"mut\">Mutated Sequence</label>\n                <input type=\"text\" value={SNP} id=\"mut\" name=\"mut\" onChange={j => sendUpdate({'SNP': j.target.value})} />\n            </div>\n        </div>\n    );\n};\n\nexport default SequenceEntry;","import { useState } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\n\nconst ConditionEntry = () => {\n\n    const [temperature, setTemperature] = useState('21');\n    const [sodium, setSodium] = useState('65');\n    const [magnesium, setMagnesium] = useState('8');\n\n    const sendUpdate = () => {\n        var data = {'temperature': parseFloat(temperature), 'sodium': parseFloat(sodium) / 1000.0, \n        'magnesium': parseFloat(magnesium) / 1000.0};\n\n        NodeFetch('http://127.0.0.1:5000/send_input', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(data)\n        }).then(function (response) {\n            return response.text();\n        })\n    }\n\n    const handleTemperature = (event, newValue) => {\n        setTemperature(newValue);\n        sendUpdate();\n    };\n    const handleSodium = (event, newValue) => {\n        setSodium(newValue);\n        sendUpdate();\n    };\n    const handleMagnesium = (event, newValue) => {\n        setMagnesium(newValue);\n        sendUpdate();\n    };\n\n    return (\n        <div className=\"conditionentry\">\n            <div class=\"condition-form\" id=\"temperature-form\">\n                <label for=\"temperature\">Temperature (C)</label>\n                <input type=\"text\" id=\"temperature\" name=\"temperature\" onChange={handleTemperature} />\n            </div>\n            <div class=\"condition-form\" id=\"sodium-form\">\n                <label for=\"sodium\">[Sodium] (mM)</label>\n                <input type=\"text\" id=\"sodium\" name=\"sodium\" onChange={handleSodium} />\n            </div>\n            <div class=\"condition-form\" id=\"magnesium-form\">\n                <label for=\"magnesium\">[Magnesium] (mM)</label>\n                <input type=\"text\" id=\"magnesium\" name=\"magnesium\" onChange={handleMagnesium} />\n            </div>\n        </div>\n    );\n};\n\nexport default ConditionEntry;","import Slider from '@material-ui/core/Slider';\nimport { useState } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\n\nfunction valuetext(value) {\n    return `${2 ** value}`;\n  }\n\nconst PopSlider = () => {\n    const sliderMin = 16;\n    const sliderMax = 4096;\n    var sliderStart = 128;\n    var sliderValue = sliderStart;\n    const [value, setValue] = useState(Math.log2(sliderValue));\n\n    const sendUpdate = () => {\n        var data = {'pop_size': value};\n\n        NodeFetch('http://127.0.0.1:5000/send_input', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(data)\n        }).then(function (response) {\n            return response.text();\n        })\n    }\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n        sendUpdate();\n    };\n\n    return (\n        <div className=\"popslider\">\n            <label for=\"population slider\" className=\"sliderlabel\">Starting Population: {2 ** value}</label>\n            <Slider\n                defaultValue={Math.log2(sliderValue)}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                onChange={handleChange}\n                step={1}\n                marks\n                scale={(x) => 2 ** x}\n                min={Math.log2(sliderMin)}\n                max={Math.log2(sliderMax)}\n            />\n        </div>\n    );\n};\n\nexport default PopSlider;","import Button from '@material-ui/core/Button';\nimport { useState } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\n\n\nconst Buttons = () => {\n\n    const [running, setRunning] = useState(false);\n\n    const sendStart = () => {\n        NodeFetch('http://127.0.0.1:5000/start_optimizer', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST'\n        }).then(function (response) {\n            return response.text();\n        })\n    }\n\n    const sendStop = () => {\n        NodeFetch('http://127.0.0.1:5000/stop_optimizer', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST'\n        }).then(function (response) {\n            return response.text();\n        })\n    }\n\n    const handleStart = () => {\n        setRunning(true);\n        sendStart();\n    }\n\n    const handleStop = () => {\n        setRunning(false);\n        sendStop();\n    }\n\n    return (\n        <div className=\"startstopbuttons\">\n            <Button className='startbutton' variant=\"contained\" color=\"primary\" onClick={handleStart}>\n                Optimize\n            </Button>\n            <Button className='stopbutton' variant=\"contained\" disabled={!running} color=\"default\" onClick={handleStop}>\n                Stop\n            </Button>\n        </div>\n    );\n};\n\nexport default Buttons;","import PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\nfunction CircularProgressWithLabel(props) {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" {...props} />\n            <Box\n                top={0}\n                left={130}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <label for='progress label' className='proglabel'>{props.value}%</label>\n            </Box>\n        </Box>\n    );\n}\nCircularProgressWithLabel.propTypes = {\n    value: PropTypes.number.isRequired,\n};\n\n// Kill all running intervals\n/*var killId = setTimeout(function () {\n    for (var i = killId; i > 0; i--) {\n        clearInterval(i);\n    }\n}, 3000);*/\n\n\n\n\nconst Output = () => {\n    const [running, setRunning] = useState(false);\n    const [finished, setFinished] = useState(false);\n    const [progress, updateProgress] = useState(0);\n    const [output, updateOutput] = useState({ finished: false });\n\n    const getProgress = () => {\n        NodeFetch('http://127.0.0.1:5000/get_progress',\n            {\n                headers: { 'Content-Type': 'application/json' },\n                method: 'POST',\n                body: ''\n            }).then(function (response) {\n                return response.json();\n            }).then(function (json) {\n                updateProgress(parseInt(json.progress));\n                setRunning(json.running);\n            })\n    }\n\n    const getOutput = () => {\n        NodeFetch('http://127.0.0.1:5000/get_output',\n            {\n                headers: { 'Content-Type': 'application/json' },\n                method: 'POST',\n                body: ''\n            }).then(function (response) {\n                return response.json();\n            }).then(function (json) {\n                updateOutput(json);\n                setFinished(json.finished);\n            })\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            getProgress();\n            getOutput();\n        }, 1000);\n        return () => {\n          clearInterval(interval);\n        };\n      }, []);\n\n    /*var mainLoop = setInterval(function () {\n        getProgress();\n        getOutput();\n    }, 10000);*/\n\n    //getProgress();\n    //getOutput();\n\n    if (running) {\n        return (\n            <div className=\"progress\">\n                <h2>Optimization in Progress...</h2>\n                <CircularProgressWithLabel variant=\"determinate\" size='150px' value={progress} className=\"progressbar\" />\n            </div>\n        );\n    }\n    else if (finished) {\n        getOutput();\n        return (\n            <div className=\"outputsequences\">\n                <h2>Output</h2>\n                <div className=\"sequencelabels\">\n                    <p>ProbeF: </p>\n                    <p>ProbeQ: </p>\n                    <p>Sink: </p>\n                    <p>Sink*: </p>\n                </div>\n                <div className=\"outsequences\">\n                    <p>{output['probeF']}</p>\n                    <p>{output['probeQ']}</p>\n                    <p>{output['sink']}</p>\n                    <p>{output['sinkC']}</p>\n                </div>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"emptyoutput\">\n                <h2>Output</h2>\n            </div>\n        );\n    }\n\n};\n\nexport default Output;","import SequenceEntry from './SequenceEntry';\nimport ConditionEntry from './ConditionEntry';\nimport PopSlider from './PopSlider';\nimport Buttons from './Buttons';\nimport Output from './Output';\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <h1>SNP-LAMP Designer</h1>\n        <SequenceEntry />\n        <ConditionEntry />\n        <PopSlider />\n        <Buttons />\n        <Output />\n      </div>\n    );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}