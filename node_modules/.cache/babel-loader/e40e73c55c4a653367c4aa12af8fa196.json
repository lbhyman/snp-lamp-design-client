{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design/react-app/src/ConditionEntry.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; //var fetch = require('node-fetch');\n\nimport NodeFetch from 'node-fetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConditionEntry = () => {\n  _s();\n\n  const [temperature, setTemperature] = useState('21');\n  const [sodium, setSodium] = useState('65');\n  const [magnesium, setMagnesium] = useState('8');\n\n  const sendUpdate = () => {\n    var data = {\n      'temperature': parseFloat(temperature),\n      'sodium': parseFloat(sodium) / 1000.0,\n      'magnesium': parseFloat(magnesium) / 1000.0\n    };\n    fetch('http://127.0.0.1:5000/send_input', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return response.text();\n    });\n  };\n\n  const handleTemperature = (event, newValue) => {\n    setTemperature(newValue);\n    sendUpdate();\n  };\n\n  const handleSodium = (event, newValue) => {\n    setSodium(newValue);\n    sendUpdate();\n  };\n\n  const handleMagnesium = (event, newValue) => {\n    setMagnesium(newValue);\n    sendUpdate();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conditionentry\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"condition-form\",\n      id: \"temperature-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"temperature\",\n        children: \"Temperature (C)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"temperature\",\n        name: \"temperature\",\n        onChange: handleTemperature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"condition-form\",\n      id: \"sodium-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"sodium\",\n        children: \"[Sodium] (mM)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"sodium\",\n        name: \"sodium\",\n        onChange: handleSodium\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"condition-form\",\n      id: \"magnesium-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"magnesium\",\n        children: \"[Magnesium] (mM)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"magnesium\",\n        name: \"magnesium\",\n        onChange: handleMagnesium\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConditionEntry, \"tjBejCvKqsvyY+d9D5M7r3bBZO0=\");\n\n_c = ConditionEntry;\nexport default ConditionEntry;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConditionEntry\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design/react-app/src/ConditionEntry.js"],"names":["useState","NodeFetch","ConditionEntry","temperature","setTemperature","sodium","setSodium","magnesium","setMagnesium","sendUpdate","data","parseFloat","fetch","headers","method","body","JSON","stringify","then","response","text","handleTemperature","event","newValue","handleSodium","handleMagnesium"],"mappings":"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","sourcesContent":["import { useState } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\n\nconst ConditionEntry = () => {\n\n    const [temperature, setTemperature] = useState('21');\n    const [sodium, setSodium] = useState('65');\n    const [magnesium, setMagnesium] = useState('8');\n\n    const sendUpdate = () => {\n        var data = {'temperature': parseFloat(temperature), 'sodium': parseFloat(sodium) / 1000.0, \n        'magnesium': parseFloat(magnesium) / 1000.0};\n\n        fetch('http://127.0.0.1:5000/send_input', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(data)\n        }).then(function (response) {\n            return response.text();\n        })\n    }\n\n    const handleTemperature = (event, newValue) => {\n        setTemperature(newValue);\n        sendUpdate();\n    };\n    const handleSodium = (event, newValue) => {\n        setSodium(newValue);\n        sendUpdate();\n    };\n    const handleMagnesium = (event, newValue) => {\n        setMagnesium(newValue);\n        sendUpdate();\n    };\n\n    return (\n        <div className=\"conditionentry\">\n            <div class=\"condition-form\" id=\"temperature-form\">\n                <label for=\"temperature\">Temperature (C)</label>\n                <input type=\"text\" id=\"temperature\" name=\"temperature\" onChange={handleTemperature} />\n            </div>\n            <div class=\"condition-form\" id=\"sodium-form\">\n                <label for=\"sodium\">[Sodium] (mM)</label>\n                <input type=\"text\" id=\"sodium\" name=\"sodium\" onChange={handleSodium} />\n            </div>\n            <div class=\"condition-form\" id=\"magnesium-form\">\n                <label for=\"magnesium\">[Magnesium] (mM)</label>\n                <input type=\"text\" id=\"magnesium\" name=\"magnesium\" onChange={handleMagnesium} />\n            </div>\n        </div>\n    );\n};\n\nexport default ConditionEntry;"]},"metadata":{},"sourceType":"module"}