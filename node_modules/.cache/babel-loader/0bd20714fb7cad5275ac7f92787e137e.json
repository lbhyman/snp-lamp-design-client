{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design-client/src/Buttons.js\",\n    _s = $RefreshSig$();\n\nimport { ShareableRunningState } from './Optimizer.js';\nimport { ShareableTemperatureState, ShareableSodiumState, ShareableMagnesiumState } from './ConditionEntry.js';\nimport { ShareableWTState, ShareableSNPState } from './SequenceEntry.js';\nimport Optimizer from './Optimizer.js';\nimport Button from '@material-ui/core/Button';\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Buttons = () => {\n  _s();\n\n  const {\n    running,\n    setRunning\n  } = useBetween(ShareableRunningState);\n  const {\n    temperature\n  } = useBetween(ShareableTemperatureState);\n  const {\n    sodium\n  } = useBetween(ShareableSodiumState);\n  const {\n    magnesium\n  } = useBetween(ShareableMagnesiumState);\n  const {\n    WT_seq\n  } = useBetween(ShareableWTState);\n  const {\n    SNP_seq\n  } = useBetween(ShareableSNPState);\n  var probe_params = {\n    WT: WT_seq,\n    SNP: SNP_seq,\n    minlength: 6,\n    mut_rate: 0.5,\n    concentrations: {\n      non_mut_target: 1e-7,\n      mut_target: 1e-7,\n      probeF: 1e-7,\n      probeQ: 1e-7,\n      sink: 1e-7,\n      sinkC: 1e-7\n    },\n    params: {\n      temperature: parseFloat(temperature),\n      sodium: parseFloat(sodium) / 1000.0,\n      magnesium: parseFloat(magnesium) / 1000.0\n    },\n    beta: [0, 0, 0, 0],\n    truncations: []\n  };\n  const [optimizer, setOptimizer] = useState(Optimizer({\n    probe_params\n  }));\n\n  const handleStart = (event, newValue) => {\n    var probe_params = {\n      WT: WT_seq,\n      SNP: SNP_seq,\n      minlength: 6,\n      mut_rate: 0.5,\n      concentrations: {\n        non_mut_target: 1e-7,\n        mut_target: 1e-7,\n        probeF: 1e-7,\n        probeQ: 1e-7,\n        sink: 1e-7,\n        sinkC: 1e-7\n      },\n      params: {\n        temperature: parseFloat(temperature),\n        sodium: parseFloat(sodium) / 1000.0,\n        magnesium: parseFloat(magnesium) / 1000.0\n      },\n      beta: [0, 0, 0, 0],\n      truncations: []\n    };\n    optimizer.run(); //var opt = Optimizer({ probe_params });\n    //opt.run();\n    //setOptimizer(opt);\n    //setRunning(true);\n  };\n\n  const handleStop = (event, newValue) => {\n    setRunning(false);\n    optimizer.reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"startstopbuttons\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"startbutton\",\n      variant: \"contained\",\n      disabled: running,\n      color: \"primary\",\n      onClick: handleStart,\n      children: \"Optimize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"stopbutton\",\n      variant: \"contained\",\n      disabled: !running,\n      color: \"default\",\n      onClick: handleStop,\n      children: \"Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Buttons, \"nue+bHai01atzRUqffXb+5gd9gM=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween, useBetween, useBetween];\n});\n\n_c = Buttons;\nexport default Buttons;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buttons\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Buttons.js"],"names":["ShareableRunningState","ShareableTemperatureState","ShareableSodiumState","ShareableMagnesiumState","ShareableWTState","ShareableSNPState","Optimizer","Button","useState","useBetween","Buttons","running","setRunning","temperature","sodium","magnesium","WT_seq","SNP_seq","probe_params","WT","SNP","minlength","mut_rate","concentrations","non_mut_target","mut_target","probeF","probeQ","sink","sinkC","params","parseFloat","beta","truncations","optimizer","setOptimizer","handleStart","event","newValue","run","handleStop","reset"],"mappings":"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","sourcesContent":["import { ShareableRunningState } from './Optimizer.js';\nimport { ShareableTemperatureState, ShareableSodiumState, ShareableMagnesiumState } from './ConditionEntry.js';\nimport { ShareableWTState, ShareableSNPState } from './SequenceEntry.js';\nimport Optimizer from './Optimizer.js';\nimport Button from '@material-ui/core/Button';\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\n\nconst Buttons = () => {\n\n    const { running, setRunning } = useBetween(ShareableRunningState);\n    const { temperature } = useBetween(ShareableTemperatureState);\n    const { sodium } = useBetween(ShareableSodiumState);\n    const { magnesium } = useBetween(ShareableMagnesiumState);\n    const { WT_seq } = useBetween(ShareableWTState);\n    const { SNP_seq } = useBetween(ShareableSNPState);\n    var probe_params = {\n        WT:WT_seq,\n        SNP:SNP_seq,\n        minlength:6,\n        mut_rate:0.5,\n        concentrations:{non_mut_target:1e-7, mut_target:1e-7, probeF:1e-7, probeQ:1e-7, sink:1e-7, sinkC:1e-7},\n        params:{temperature:parseFloat(temperature), sodium:parseFloat(sodium)/1000.0, magnesium:parseFloat(magnesium)/1000.0},\n        beta:[0,0,0,0],\n        truncations:[]\n    };\n    const [optimizer, setOptimizer] = useState(Optimizer({ probe_params }))\n\n    const handleStart = (event, newValue) => {\n        var probe_params = {\n            WT:WT_seq,\n            SNP:SNP_seq,\n            minlength:6,\n            mut_rate:0.5,\n            concentrations:{non_mut_target:1e-7, mut_target:1e-7, probeF:1e-7, probeQ:1e-7, sink:1e-7, sinkC:1e-7},\n            params:{temperature:parseFloat(temperature), sodium:parseFloat(sodium)/1000.0, magnesium:parseFloat(magnesium)/1000.0},\n            beta:[0,0,0,0],\n            truncations:[]\n        };\n        optimizer.run();\n        //var opt = Optimizer({ probe_params });\n        //opt.run();\n        //setOptimizer(opt);\n        //setRunning(true);\n    };\n    const handleStop = (event, newValue) => {\n        setRunning(false);\n        optimizer.reset();\n    };\n\n    return (\n        <div className=\"startstopbuttons\">\n            <Button className='startbutton' variant=\"contained\" disabled={running} color=\"primary\" onClick={handleStart}>\n                Optimize\n            </Button>\n            <Button className='stopbutton' variant=\"contained\" disabled={!running} color=\"default\" onClick={handleStop}>\n                Stop\n            </Button>\n        </div>\n    )\n};\n\nexport default Buttons;"]},"metadata":{},"sourceType":"module"}