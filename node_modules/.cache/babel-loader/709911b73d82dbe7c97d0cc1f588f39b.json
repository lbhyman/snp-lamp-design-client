{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { Component } from 'react';\nimport { ShareablePopSizeState } from './PopSlider.js';\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport NodeFetch from 'node-fetch';\nexport const ShareableRunningState = () => {\n  _s();\n\n  const [running, setRunning] = useState(false);\n  return {\n    running,\n    setRunning\n  };\n};\n\n_s(ShareableRunningState, \"GqSjlWMyRcFSNk6JAdDkMp9357M=\");\n\n_c = ShareableRunningState;\nexport const ShareableFinishedState = () => {\n  _s2();\n\n  const [finished, setFinished] = useState(false);\n  return {\n    finished,\n    setFinished\n  };\n};\n\n_s2(ShareableFinishedState, \"mZBoEqN32gr4012eGv/dCEBa7uo=\");\n\n_c2 = ShareableFinishedState;\nexport const ShareableGAProgressState = () => {\n  _s3();\n\n  const [GAProgress, setGAProgress] = useState(0);\n  return {\n    GAProgress,\n    setGAProgress\n  };\n};\n\n_s3(ShareableGAProgressState, \"NNJRei+Z2luInje77Z08KK60zQE=\");\n\n_c3 = ShareableGAProgressState;\nexport const ShareableOutputState = () => {\n  _s4();\n\n  const [output, setOutput] = useState();\n  return {\n    output,\n    setOutput\n  };\n};\n\n_s4(ShareableOutputState, \"WnuMlFXT1y2OZOxPABl/NBYju+4=\");\n\n_c4 = ShareableOutputState;\n\nconst SharedState = () => {\n  _s5();\n\n  const {\n    running,\n    setRunning\n  } = useBetween(ShareableRunningState);\n  const {\n    setFinished\n  } = useBetween(ShareableFinishedState);\n  const {\n    GAProgress,\n    setGAProgress\n  } = useBetween(ShareableGAProgressState);\n  const {\n    setOutput\n  } = useBetween(ShareableOutputState);\n  const {\n    popSize\n  } = useBetween(ShareablePopSizeState);\n  return {\n    running,\n    setRunning,\n    setFinished,\n    GAProgress,\n    setGAProgress,\n    setOutput,\n    popSize\n  };\n};\n\n_s5(SharedState, \"T9+VxCvWMmRWj0lGHf7tM7o7bPg=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween, useBetween];\n});\n\n_c5 = SharedState;\n\nclass Optimizer extends Component {\n  constructor(props) {\n    this.probeParams = props.probeParams;\n    this.probePopulation = [];\n    this.finalProbe = null;\n    this.endPointAddress = 'http://127.0.0.1:5000'; // TODO: Use environment variable\n  }\n\n  reset() {\n    this.probePopulation = [];\n    this.finalProbe = null;\n    SharedState.setRunning(false);\n    setFinished(false);\n    setGAProgress(0);\n    setOutput(null);\n  }\n\n  generateInitialGAPopulation() {\n    var endPoint = this.endPointAddress.concat('/generate_initial_population');\n    var params = {\n      popSize: popSize,\n      probeParams: this.probeParams\n    };\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(params)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      this.probePopulation = JSON.parse(json);\n    });\n  }\n\n  generateNextGAPopulation() {\n    var endPoint = this.endPointAddress.concat('/generate_next_population');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(this.probePopulation)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      this.probePopulation = JSON.parse(json);\n    });\n  }\n\n  generateNextHillClimbingSteps() {\n    var endPoint = endPointAddress.concat('/hill_climbing_options');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(this.probePopulation)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      this.probePopulation = JSON.parse(json);\n    });\n  }\n\n  calculateProbeFitness(probe) {\n    var endPoint = endPointAddress.concat('/calculate_fitness');\n    NodeFetch(endPoint, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(probe)\n    }).then(function (response) {\n      return JSON.parse(response.json());\n    });\n  }\n\n  calculatePopulationFitness() {\n    for (var i = 0; i < this.probePopulation.length; i++) {\n      if (!running) {\n        reset();\n        return null;\n      }\n\n      var currProbe = this.probePopulation[i];\n\n      if (currProbe.beta[0] !== 0) {\n        this.probePopulation[i] = calculateProbeFitness(currProbe);\n      }\n\n      setGAProgress(GAProgress + 1);\n    }\n  }\n\n  getBestProbe() {\n    var bestProbe = this.probePopulation[0];\n\n    for (var i = 0; i < this.probePopulation.length; i++) {\n      var currProbe = this.probePopulation[i];\n\n      if (currProbe.beta[0] > bestProbe.beta[0]) {\n        bestProbe = currProbe;\n      }\n    }\n\n    return bestProbe;\n  }\n\n  runGA() {\n    generateInitialGAPopulation();\n    calculatePopulationFitness();\n\n    while (this.probePopulation.length > 1) {\n      generateNextGAPopulation();\n      calculatePopulationFitness();\n    }\n\n    calculatePopulationFitness();\n  }\n\n  runHillClimbing() {\n    var bestProbe = getBestProbe();\n    generateNextHillClimbingSteps();\n    calculatePopulationFitness();\n    var newProbe = getBestProbe();\n\n    while (newProbe.beta[0] > bestProbe.beta[0] && this.probePopulation.length > 1) {\n      bestProbe = newProbe;\n      generateNextHillClimbingSteps();\n      calculatePopulationFitness();\n      var newProbe = getBestProbe();\n    }\n\n    this.finalProbe = bestProbe;\n  }\n\n  run(props) {\n    reset();\n    this.probeParams = props.probeParams;\n    setRunning(true);\n    setFinished(false);\n    runGA();\n    runHillClimbing();\n\n    if (this.probePopulation.length > 0) {\n      setFinished(true);\n      setOutput(this.finalProbe);\n    }\n\n    setRunning(false);\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\n;\nexport default Optimizer;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ShareableRunningState\");\n$RefreshReg$(_c2, \"ShareableFinishedState\");\n$RefreshReg$(_c3, \"ShareableGAProgressState\");\n$RefreshReg$(_c4, \"ShareableOutputState\");\n$RefreshReg$(_c5, \"SharedState\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Optimizer.js"],"names":["Component","ShareablePopSizeState","useState","useBetween","NodeFetch","ShareableRunningState","running","setRunning","ShareableFinishedState","finished","setFinished","ShareableGAProgressState","GAProgress","setGAProgress","ShareableOutputState","output","setOutput","SharedState","popSize","Optimizer","constructor","props","probeParams","probePopulation","finalProbe","endPointAddress","reset","generateInitialGAPopulation","endPoint","concat","params","headers","method","body","JSON","stringify","then","response","json","parse","generateNextGAPopulation","generateNextHillClimbingSteps","calculateProbeFitness","probe","calculatePopulationFitness","i","length","currProbe","beta","getBestProbe","bestProbe","runGA","runHillClimbing","newProbe","run","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport { ShareablePopSizeState } from './PopSlider.js';\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport NodeFetch from 'node-fetch';\n\nexport const ShareableRunningState = () => {\n    const [running, setRunning] = useState(false);\n    return {\n        running,\n        setRunning\n    }\n}\n\nexport const ShareableFinishedState = () => {\n    const [finished, setFinished] = useState(false);\n    return {\n        finished,\n        setFinished\n    }\n}\n\nexport const ShareableGAProgressState = () => {\n    const [GAProgress, setGAProgress] = useState(0);\n    return {\n        GAProgress,\n        setGAProgress\n    }    \n}\n\nexport const ShareableOutputState = () => {\n    const [output, setOutput] = useState();\n    return {\n        output,\n        setOutput\n    }    \n}\n\nconst SharedState = () => {\n    const { running, setRunning } = useBetween(ShareableRunningState);\n    const { setFinished } = useBetween(ShareableFinishedState);\n    const { GAProgress, setGAProgress } = useBetween(ShareableGAProgressState);\n    const { setOutput } = useBetween(ShareableOutputState);\n    const { popSize } = useBetween(ShareablePopSizeState);\n    return {\n        running, setRunning, setFinished, GAProgress, setGAProgress, setOutput, popSize\n    };\n};\n\n\nclass Optimizer extends Component {\n\n    constructor(props) {\n        this.probeParams = props.probeParams;\n        this.probePopulation = [];\n        this.finalProbe = null;\n        this.endPointAddress = 'http://127.0.0.1:5000'; // TODO: Use environment variable\n    };\n\n    reset() {\n        this.probePopulation = [];\n        this.finalProbe = null;\n        SharedState.setRunning(false);\n        setFinished(false);\n        setGAProgress(0);\n        setOutput(null);\n    };\n\n    generateInitialGAPopulation() {\n        var endPoint = this.endPointAddress.concat('/generate_initial_population');\n        var params = {\n            popSize: popSize,\n            probeParams: this.probeParams\n        }\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(params)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            this.probePopulation = JSON.parse(json);\n        })\n    };\n\n    generateNextGAPopulation() {\n        var endPoint = this.endPointAddress.concat('/generate_next_population');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(this.probePopulation)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            this.probePopulation = JSON.parse(json);\n        })\n    };\n\n    generateNextHillClimbingSteps() {\n        var endPoint = endPointAddress.concat('/hill_climbing_options');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(this.probePopulation)\n        }).then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            this.probePopulation = JSON.parse(json);\n        })\n    };\n\n    calculateProbeFitness(probe) {\n        var endPoint = endPointAddress.concat('/calculate_fitness');\n        NodeFetch(endPoint,\n        {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(probe)\n        }).then(function (response) {\n            return JSON.parse(response.json());\n        })\n    };\n\n    calculatePopulationFitness() {\n        for (var i=0; i<this.probePopulation.length; i++) {\n            if(!running) {\n                reset();\n                return null;\n            }\n            var currProbe = this.probePopulation[i];\n            if (currProbe.beta[0] !== 0) {\n                this.probePopulation[i] = calculateProbeFitness(currProbe);\n            }\n            setGAProgress(GAProgress + 1);\n        }   \n    };\n\n    getBestProbe() {\n        var bestProbe = this.probePopulation[0];\n        for (var i=0; i<this.probePopulation.length; i++) {\n            var currProbe = this.probePopulation[i];\n            if (currProbe.beta[0] > bestProbe.beta[0]) {\n                bestProbe = currProbe;\n            }\n        }\n        return bestProbe;\n    };\n\n    runGA() {\n        generateInitialGAPopulation();\n        calculatePopulationFitness();\n        while (this.probePopulation.length > 1) {\n            generateNextGAPopulation();\n            calculatePopulationFitness();\n        }\n        calculatePopulationFitness();\n    };\n\n    runHillClimbing() {\n        var bestProbe = getBestProbe();\n        generateNextHillClimbingSteps();\n        calculatePopulationFitness();\n        var newProbe = getBestProbe();\n        while (newProbe.beta[0] > bestProbe.beta[0] && this.probePopulation.length > 1) {\n            bestProbe = newProbe;\n            generateNextHillClimbingSteps();\n            calculatePopulationFitness();\n            var newProbe = getBestProbe();\n        }\n        this.finalProbe = bestProbe;\n    };\n\n    run(props) {\n        reset();\n        this.probeParams = props.probeParams;\n        setRunning(true);\n        setFinished(false);\n        runGA();\n        runHillClimbing();\n        if (this.probePopulation.length > 0) {\n            setFinished(true);\n            setOutput(this.finalProbe);\n        }\n        setRunning(false);\n    };\n\n    render() {\n        return null;\n    };\n};\n\nexport default Optimizer;"]},"metadata":{},"sourceType":"module"}