{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design/react-app/src/Output.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { useState } from 'react'; //var fetch = require('node-fetch');\n\nimport NodeFetch from 'node-fetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CircularProgressWithLabel(props) {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    display: \"inline-flex\",\n    children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n      variant: \"determinate\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      top: 0,\n      left: 130,\n      bottom: 0,\n      right: 0,\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"progress label\",\n        className: \"proglabel\",\n        children: [props.value, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }, this);\n}\n\n_c = CircularProgressWithLabel;\nCircularProgressWithLabel.propTypes = {\n  value: PropTypes.number.isRequired\n};\n\nconst Output = () => {\n  _s();\n\n  var running = false;\n  var finished = false;\n  const [progress, updateProgress] = useState(0.0);\n  const [output, updateOutput] = useState({\n    probeF: 'ATGC',\n    probeQ: 'ATGC',\n    sink: 'ATGC',\n    sinkC: 'ATGC'\n  });\n  /*var probeF = 'ATGC'\n  var probeQ = 'ATGC'\n  var sink = 'ATGC'\n  var sinkC = 'ATGC'*/\n\n  const getProgress = () => {\n    NodeFetch('http://127.0.0.1:5000/get_progress', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    }).then(function (response) {\n      updateProgress(parseInt(response));\n    });\n  };\n\n  const getOutput = () => {\n    NodeFetch('http://127.0.0.1:5000/get_output', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    }).then(function (response) {\n      updateOutput(response);\n    });\n  };\n\n  if (running) {\n    getProgress();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Optimization in Progress...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n        variant: \"determinate\",\n        size: \"150px\",\n        value: progress,\n        className: \"progressbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  } else if (finished) {\n    getOutput();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputsequences\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sequencelabels\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"ProbeF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"ProbeQ: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sink: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sink*: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outsequences\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: output['probeF']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: output['probeQ']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: output['sink']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: output['sinkC']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emptyoutput\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Output, \"HNfeDNCPWF48j7ocSKhuL/LedAE=\");\n\n_c2 = Output;\nexport default Output;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CircularProgressWithLabel\");\n$RefreshReg$(_c2, \"Output\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design/react-app/src/Output.js"],"names":["PropTypes","CircularProgress","Box","useState","NodeFetch","CircularProgressWithLabel","props","value","propTypes","number","isRequired","Output","running","finished","progress","updateProgress","output","updateOutput","probeF","probeQ","sink","sinkC","getProgress","headers","method","then","response","parseInt","getOutput"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { useState } from 'react';\n//var fetch = require('node-fetch');\nimport NodeFetch from 'node-fetch';\nfunction CircularProgressWithLabel(props) {\n    return (\n      <Box position=\"relative\" display=\"inline-flex\">\n        <CircularProgress variant=\"determinate\" {...props} />\n        <Box\n          top={0}\n          left={130}\n          bottom={0}\n          right={0}\n          position=\"absolute\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <label for='progress label' className='proglabel'>{props.value}%</label>\n        </Box>\n      </Box>\n    );\n}\nCircularProgressWithLabel.propTypes = {\n    value: PropTypes.number.isRequired,\n};\n\nconst Output = () => {\n\n    var running = false;\n    var finished = false;\n    const [progress, updateProgress] = useState(0.0);\n    const [output, updateOutput] = useState({probeF: 'ATGC', probeQ: 'ATGC', sink: 'ATGC', sinkC: 'ATGC'});\n    /*var probeF = 'ATGC'\n    var probeQ = 'ATGC'\n    var sink = 'ATGC'\n    var sinkC = 'ATGC'*/\n\n    const getProgress = () => {\n        NodeFetch('http://127.0.0.1:5000/get_progress', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST'\n        }).then(function (response) {\n            updateProgress(parseInt(response));\n        })\n    }\n\n    const getOutput = () => {\n        NodeFetch('http://127.0.0.1:5000/get_output', \n\t\t{headers: {'Content-Type': 'application/json'},\n\t\tmethod: 'POST'\n        }).then(function (response) {\n            updateOutput(response);\n        })\n    }\n\n    if(running) {\n        getProgress();\n        return (\n            <div className=\"progress\">\n                <h2>Optimization in Progress...</h2>\n                <CircularProgressWithLabel variant=\"determinate\" size='150px' value={progress} className=\"progressbar\"/>\n            </div>\n        );\n    }\n    else if (finished) {\n        getOutput();\n        return (\n            <div className=\"outputsequences\">\n                <h2>Output</h2>\n                <div className=\"sequencelabels\">\n                    <p>ProbeF: </p>\n                    <p>ProbeQ: </p>\n                    <p>Sink: </p>\n                    <p>Sink*: </p>\n                </div>\n                <div className=\"outsequences\">\n                    <p>{output['probeF']}</p>\n                    <p>{output['probeQ']}</p>\n                    <p>{output['sink']}</p>\n                    <p>{output['sinkC']}</p>\n                </div>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"emptyoutput\">\n                <h2>Output</h2>\n            </div>\n        );\n    }\n\n};\n\nexport default Output;"]},"metadata":{},"sourceType":"module"}