{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design-client/src/Buttons.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { ShareableRunningState, ShareableOutputState, ShareableFinishedState, ShareableWarningState } from './Optimizer.js';\nimport Optimizer from './Optimizer.js';\nimport Button from '@material-ui/core/Button';\nimport { Theme, MuiThemeProvider } from '@material-ui/core';\nimport { createTheme } from '@material-ui/core/styles';\nimport { useState, useReducer, useEffect } from 'react';\nimport { useBetween } from 'use-between';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShareableProbeParams = () => {\n  _s();\n\n  var params = {\n    WT: '',\n    SNP: '',\n    minlength: 6,\n    mut_rate: 0.5,\n    concentrations: {\n      non_mut_target: 1e-7,\n      mut_target: 1e-7,\n      probeF: 1e-7,\n      probeQ: 1e-7,\n      sink: 1e-7,\n      sinkC: 1e-7\n    },\n    params: {\n      temperature: '',\n      sodium: '',\n      magnesium: ''\n    },\n    beta: [0, 0, 0, 0],\n    truncations: []\n  };\n  const [probeParams, setProbeParams] = useState(params);\n  return {\n    probeParams,\n    setProbeParams\n  };\n};\n\n_s(ShareableProbeParams, \"qUu6jFvarJdQVfrVaYefSqCGWeg=\");\n\n_c = ShareableProbeParams;\n\nconst screenSequence = sequence => {\n  var seqArray = sequence.split('');\n  var allowedChars = 'ACTGactg';\n\n  for (let i = 0; i < seqArray.length; i++) {\n    if (!allowedChars.includes(seqArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}; // Check whether the user has provided valid input and generate a warning to show\n\n\nconst screenInput = probeParams => {\n  var temperature = parseFloat(probeParams.params.temperature);\n  var sodium = parseFloat(probeParams.params.sodium);\n  var magnesium = parseFloat(probeParams.params.magnesium);\n\n  if (isNaN(temperature) || isNaN(sodium) || isNaN(magnesium)) {\n    return 'Temperature, [Sodium], and [Magnesium] must be numeric.';\n  } else if (temperature > 100.0 || temperature < 0.0) {\n    return 'Temperature must be in the range 0-100C.';\n  } else if (magnesium > 100.0) {\n    return 'Magnesium must be in the range 0-100mM';\n  } else if (sodium > 500.0 || sodium < 10.0) {\n    return 'Sodium must be in the range 10-500mM';\n  } else if (probeParams.WT.length < 10 || probeParams.WT.length > 100) {\n    return 'Sequence lengths must be in the range 10-100 bases.';\n  } else if (probeParams.SNP.length < 10 || probeParams.SNP.length > 100) {\n    return 'Sequence lengths must be in the range 10-100 bases.';\n  } else if (!screenSequence(probeParams.SNP) || !screenSequence(probeParams.WT)) {\n    return 'Sequences must be DNA.';\n  } else if (probeParams.SNP.length !== probeParams.WT.length) {\n    return 'Sequences must be of equal length.';\n  } else {\n    return '';\n  }\n};\n\nconst theme = createTheme({\n  palette: {\n    primary: purple,\n    secondary: red\n  }\n});\n\nconst Buttons = () => {\n  _s2();\n\n  const {\n    running,\n    setRunning\n  } = useBetween(ShareableRunningState);\n  const {\n    setOutput\n  } = useBetween(ShareableOutputState);\n  const {\n    setFinished\n  } = useBetween(ShareableFinishedState);\n  const {\n    setWarning\n  } = useBetween(ShareableWarningState);\n  const {\n    probeParams\n  } = useBetween(ShareableProbeParams);\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  useEffect(() => {\n    forceUpdate();\n  }, [running]);\n\n  const HandleStart = () => {\n    forceUpdate();\n    var warning = screenInput(probeParams);\n    setWarning(warning);\n\n    if (warning === '') {\n      setFinished(false);\n      setOutput(null);\n      setRunning(true);\n    }\n  };\n\n  const HandleStop = () => {\n    forceUpdate();\n    setRunning(false);\n    setOutput(null);\n    setFinished(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"startstopbuttons\",\n    children: [/*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Button\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"startbutton\",\n          variant: \"contained\",\n          disabled: running,\n          color: \"primary\",\n          onClick: HandleStart,\n          children: \"Optimize\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Button\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"stopbutton\",\n          variant: \"contained\",\n          disabled: !running,\n          color: \"default\",\n          onClick: HandleStop,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), running && /*#__PURE__*/_jsxDEV(Optimizer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Buttons, \"7vgLkWzyWOo6YCATklVEd4RFZkU=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween, useBetween];\n});\n\n_c2 = Buttons;\nexport default Buttons;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShareableProbeParams\");\n$RefreshReg$(_c2, \"Buttons\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Buttons.js"],"names":["ShareableRunningState","ShareableOutputState","ShareableFinishedState","ShareableWarningState","Optimizer","Button","Theme","MuiThemeProvider","createTheme","useState","useReducer","useEffect","useBetween","ShareableProbeParams","params","WT","SNP","minlength","mut_rate","concentrations","non_mut_target","mut_target","probeF","probeQ","sink","sinkC","temperature","sodium","magnesium","beta","truncations","probeParams","setProbeParams","screenSequence","sequence","seqArray","split","allowedChars","i","length","includes","screenInput","parseFloat","isNaN","theme","palette","primary","purple","secondary","red","Buttons","running","setRunning","setOutput","setFinished","setWarning","forceUpdate","x","HandleStart","warning","HandleStop"],"mappings":"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","sourcesContent":["import { ShareableRunningState, ShareableOutputState, ShareableFinishedState, ShareableWarningState } from './Optimizer.js';\nimport Optimizer from './Optimizer.js';\nimport Button from '@material-ui/core/Button';\nimport { Theme, MuiThemeProvider } from '@material-ui/core';\nimport { createTheme }  from '@material-ui/core/styles'\nimport { useState, useReducer, useEffect } from 'react';\nimport { useBetween } from 'use-between';\n\nexport const ShareableProbeParams = () => {\n    var params = {\n        WT:'',\n        SNP:'',\n        minlength:6,\n        mut_rate:0.5,\n        concentrations:{non_mut_target:1e-7, mut_target:1e-7, probeF:1e-7, probeQ:1e-7, sink:1e-7, sinkC:1e-7},\n        params:{temperature:'', sodium:'', magnesium:''},\n        beta:[0,0,0,0],\n        truncations:[]\n    };\n    const [probeParams, setProbeParams] = useState(params);\n    return {\n        probeParams,\n        setProbeParams\n    };\n};\n\nconst screenSequence = (sequence) => {\n    var seqArray = sequence.split('');\n    var allowedChars = 'ACTGactg'\n    for (let i = 0; i < seqArray.length; i++) {\n        if (!allowedChars.includes(seqArray[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Check whether the user has provided valid input and generate a warning to show\nconst screenInput = (probeParams) => {\n    var temperature = parseFloat(probeParams.params.temperature);\n    var sodium = parseFloat(probeParams.params.sodium);\n    var magnesium = parseFloat(probeParams.params.magnesium);\n    if (isNaN(temperature) || isNaN(sodium) || isNaN(magnesium)) {\n        return 'Temperature, [Sodium], and [Magnesium] must be numeric.';\n    }\n    else if (temperature > 100.0 || temperature < 0.0) {\n        return 'Temperature must be in the range 0-100C.';\n    }\n    else if (magnesium > 100.0) {\n        return 'Magnesium must be in the range 0-100mM';\n    }\n    else if (sodium > 500.0 || sodium < 10.0) {\n        return 'Sodium must be in the range 10-500mM';\n    }\n    else if (probeParams.WT.length < 10 || probeParams.WT.length > 100) {\n        return 'Sequence lengths must be in the range 10-100 bases.';\n    }\n    else if (probeParams.SNP.length < 10 || probeParams.SNP.length > 100) {\n        return 'Sequence lengths must be in the range 10-100 bases.';\n    }\n    else if (!screenSequence(probeParams.SNP) || !screenSequence(probeParams.WT)) {\n        return 'Sequences must be DNA.';\n    }\n    else if (probeParams.SNP.length !== probeParams.WT.length) {\n        return 'Sequences must be of equal length.';\n    }\n    else {\n        return '';\n    }\n};\n\nconst theme = createTheme({\n    palette: {\n      primary: purple,\n      secondary: red\n    }\n  });\n\nconst Buttons = () => {\n\n    const { running, setRunning } = useBetween(ShareableRunningState);\n    const { setOutput } = useBetween(ShareableOutputState);\n    const { setFinished } = useBetween(ShareableFinishedState);\n    const { setWarning } = useBetween(ShareableWarningState);\n    const { probeParams } = useBetween(ShareableProbeParams);\n    const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n    useEffect(() => {\n        forceUpdate();\n    }, [running]);\n\n    const HandleStart = () => {\n        forceUpdate();\n        var warning = screenInput(probeParams);\n        setWarning(warning);\n        if (warning === '') {\n            setFinished(false);\n            setOutput(null);\n            setRunning(true);\n        }\n    };\n\n    const HandleStop = () => {\n        forceUpdate();\n        setRunning(false);\n        setOutput(null);\n        setFinished(false);\n    };\n\n    return (\n        <div className=\"startstopbuttons\">\n            <MuiThemeProvider theme={theme}>\n                <div className='Button'>\n                    <Button className='startbutton' variant=\"contained\" disabled={running} color=\"primary\" onClick={HandleStart}>\n                        Optimize\n                    </Button>\n                </div>\n                <div className='Button'>\n                    <Button className='stopbutton' variant=\"contained\" disabled={!running} color=\"default\" onClick={HandleStop}>\n                        Stop\n                    </Button>\n                </div>\n            </MuiThemeProvider>\n            \n            {running && <Optimizer />}\n        </div>\n    )\n};\n\nexport default Buttons;"]},"metadata":{},"sourceType":"module"}