{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design-client/src/Buttons.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { ShareableRunningState, ShareableOutputState, ShareableFinishedState, ShareableWarningState } from './Optimizer.js';\nimport Optimizer from './Optimizer.js';\nimport Button from '@material-ui/core/Button';\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShareableProbeParams = () => {\n  _s();\n\n  var params = {\n    WT: '',\n    SNP: '',\n    minlength: 6,\n    mut_rate: 0.5,\n    concentrations: {\n      non_mut_target: 1e-7,\n      mut_target: 1e-7,\n      probeF: 1e-7,\n      probeQ: 1e-7,\n      sink: 1e-7,\n      sinkC: 1e-7\n    },\n    params: {\n      temperature: 21.0,\n      sodium: 0.065,\n      magnesium: 0.008\n    },\n    beta: [0, 0, 0, 0],\n    truncations: []\n  };\n  const [probeParams, setProbeParams] = useState(params);\n  return {\n    probeParams,\n    setProbeParams\n  };\n};\n\n_s(ShareableProbeParams, \"qUu6jFvarJdQVfrVaYefSqCGWeg=\");\n\n_c = ShareableProbeParams;\n\nconst screenSequence = sequence => {\n  var seqArray = sequence.split('');\n  var allowedChars = 'ACTGactg';\n\n  for (let i = 0; i < seqArray.length; i++) {\n    if (!allowedChars.includes(seqArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}; // Check whether the user has provided valid input and generate a warning to show\n\n\nconst screenInput = probeParams => {\n  var temperature = parseFloat(probeParams.params.temperature);\n  var sodium = parseFloat(probeParams.params.sodium);\n  var magnesium = parseFloat(probeParams.params.magnesium);\n\n  if (isNaN(temperature) || isNaN(sodium) || isNaN(magnesium)) {\n    return 'Temperature, Sodium, and Magnesium must be numeric.';\n  } else if (temperature > 100.0 || temperature < 0.0) {\n    return 'Temperature must be in the range 0-100C.';\n  } else if (magnesium > 100.0) {\n    return 'Magnesium must be in the range 0-100mM';\n  } else if (sodium > 500.0 || sodium < 10.0) {\n    return 'Sodium must be in the range 10-500mM';\n  } else if (probeParams.WT.length < 10 || probeParams.WT.length > 100) {\n    console.log(probeParams);\n    return 'Sequence lengths must be in the range 10-100 bases.';\n  } else if (probeParams.SNP.length < 10 || probeParams.SNP.length > 100) {\n    console.log(probeParams);\n    return 'Sequence lengths must be in the range 10-100 bases.';\n  } else if (!screenSequence(probeParams.SNP) || !screenSequence(probeParams.WT)) {\n    return 'Sequences must be DNA.';\n  } else if (probeParams.SNP.length !== probeParams.WT.length) {\n    return 'Sequences must be of equal length.';\n  } else {\n    return '';\n  }\n};\n\nconst Buttons = () => {\n  _s2();\n\n  const {\n    running,\n    setRunning\n  } = useBetween(ShareableRunningState);\n  const {\n    setOutput\n  } = useBetween(ShareableOutputState);\n  const {\n    setFinished\n  } = useBetween(ShareableFinishedState);\n  const {\n    setWarning\n  } = useBetween(ShareableWarningState);\n  const {\n    probeParams\n  } = useBetween(ShareableProbeParams);\n\n  const HandleStart = () => {\n    var warning = screenInput(probeParams);\n    setWarning(warning);\n\n    if (warning === '') {\n      setFinished(false);\n      setOutput(null);\n      setRunning(true);\n    }\n  };\n\n  const HandleStop = () => {\n    setRunning(false);\n    setOutput(null);\n    setFinished(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"startstopbuttons\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"startbutton\",\n      variant: \"contained\",\n      disabled: running,\n      color: \"primary\",\n      onClick: HandleStart,\n      children: \"Optimize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"stopbutton\",\n      variant: \"contained\",\n      disabled: !running,\n      color: \"default\",\n      onClick: HandleStop,\n      children: \"Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), running && /*#__PURE__*/_jsxDEV(Optimizer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Buttons, \"NTHoesianfr37LGYKCC7iWWx2jI=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween, useBetween];\n});\n\n_c2 = Buttons;\nexport default Buttons;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShareableProbeParams\");\n$RefreshReg$(_c2, \"Buttons\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Buttons.js"],"names":["ShareableRunningState","ShareableOutputState","ShareableFinishedState","ShareableWarningState","Optimizer","Button","useState","useBetween","ShareableProbeParams","params","WT","SNP","minlength","mut_rate","concentrations","non_mut_target","mut_target","probeF","probeQ","sink","sinkC","temperature","sodium","magnesium","beta","truncations","probeParams","setProbeParams","screenSequence","sequence","seqArray","split","allowedChars","i","length","includes","screenInput","parseFloat","isNaN","console","log","Buttons","running","setRunning","setOutput","setFinished","setWarning","HandleStart","warning","HandleStop"],"mappings":"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","sourcesContent":["import { ShareableRunningState, ShareableOutputState, ShareableFinishedState, ShareableWarningState } from './Optimizer.js';\nimport Optimizer from './Optimizer.js';\nimport Button from '@material-ui/core/Button';\nimport { useState } from 'react';\nimport { useBetween } from 'use-between';\n\nexport const ShareableProbeParams = () => {\n    var params = {\n        WT:'',\n        SNP:'',\n        minlength:6,\n        mut_rate:0.5,\n        concentrations:{non_mut_target:1e-7, mut_target:1e-7, probeF:1e-7, probeQ:1e-7, sink:1e-7, sinkC:1e-7},\n        params:{temperature:21.0, sodium:0.065, magnesium:0.008},\n        beta:[0,0,0,0],\n        truncations:[]\n    };\n    const [probeParams, setProbeParams] = useState(params);\n    return {\n        probeParams,\n        setProbeParams\n    };\n};\n\nconst screenSequence = (sequence) => {\n    var seqArray = sequence.split('');\n    var allowedChars = 'ACTGactg'\n    for (let i = 0; i < seqArray.length; i++) {\n        if (!allowedChars.includes(seqArray[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Check whether the user has provided valid input and generate a warning to show\nconst screenInput = (probeParams) => {\n    var temperature = parseFloat(probeParams.params.temperature);\n    var sodium = parseFloat(probeParams.params.sodium);\n    var magnesium = parseFloat(probeParams.params.magnesium);\n    if (isNaN(temperature) || isNaN(sodium) || isNaN(magnesium)) {\n        return 'Temperature, Sodium, and Magnesium must be numeric.';\n    }\n    else if (temperature > 100.0 || temperature < 0.0) {\n        return 'Temperature must be in the range 0-100C.';\n    }\n    else if (magnesium > 100.0) {\n        return 'Magnesium must be in the range 0-100mM';\n    }\n    else if (sodium > 500.0 || sodium < 10.0) {\n        return 'Sodium must be in the range 10-500mM';\n    }\n    else if (probeParams.WT.length < 10 || probeParams.WT.length > 100) {\n        console.log(probeParams);\n        return 'Sequence lengths must be in the range 10-100 bases.';\n    }\n    else if (probeParams.SNP.length < 10 || probeParams.SNP.length > 100) {\n        console.log(probeParams);\n        return 'Sequence lengths must be in the range 10-100 bases.';\n    }\n    else if (!screenSequence(probeParams.SNP) || !screenSequence(probeParams.WT)) {\n        return 'Sequences must be DNA.';\n    }\n    else if (probeParams.SNP.length !== probeParams.WT.length) {\n        return 'Sequences must be of equal length.';\n    }\n    else {\n        return '';\n    }\n};\n\nconst Buttons = () => {\n\n    const { running, setRunning } = useBetween(ShareableRunningState);\n    const { setOutput } = useBetween(ShareableOutputState);\n    const { setFinished } = useBetween(ShareableFinishedState);\n    const { setWarning } = useBetween(ShareableWarningState);\n    const { probeParams } = useBetween(ShareableProbeParams);\n\n    const HandleStart = () => {\n        var warning = screenInput(probeParams);\n        setWarning(warning);\n        if (warning === '') {\n            setFinished(false);\n            setOutput(null);\n            setRunning(true);\n        }\n    };\n\n    const HandleStop = () => {\n        setRunning(false);\n        setOutput(null);\n        setFinished(false);\n    };\n\n    return (\n        <div className=\"startstopbuttons\">\n            <Button className='startbutton' variant=\"contained\" disabled={running} color=\"primary\" onClick={HandleStart}>\n                Optimize\n            </Button>\n            <Button className='stopbutton' variant=\"contained\" disabled={!running} color=\"default\" onClick={HandleStop}>\n                Stop\n            </Button>\n            {running && <Optimizer />}\n        </div>\n    )\n};\n\nexport default Buttons;"]},"metadata":{},"sourceType":"module"}