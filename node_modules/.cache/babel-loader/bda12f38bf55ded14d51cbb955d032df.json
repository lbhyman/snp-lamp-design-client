{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareableProbeParams } from './Buttons.js';\nimport { ShareableRunningState, ShareableFinishedState, ShareableOutputState, ShareableWarningState } from './Output.js'; //import useInterval from './useInterval.js';\n\nimport NodeFetch from 'node-fetch'; //'http://127.0.0.1:8000';\n\nasync function runOptimizer(finalParams) {\n  //var endPoint = process.env.REACT_APP_ENDPOINTADDRESS.concat('/start_optimizer');\n  var endPoint = 'http://127.0.0.1:8000/start_optimizer';\n  finalParams.params.temperature = parseFloat(finalParams.params.temperature);\n  finalParams.params.sodium = parseFloat(finalParams.params.sodium) / 1000.0;\n  finalParams.params.magnesium = parseFloat(finalParams.params.magnesium) / 1000.0;\n  return NodeFetch(endPoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      'probeParams': finalParams\n    })\n  }).then(response => {\n    return response.json();\n  });\n}\n\nconst Optimizer = () => {\n  _s();\n\n  //const maxReattempts = 5;\n  const {\n    probeParams\n  } = useBetween(ShareableProbeParams); // eslint-disable-next-line\n\n  const {\n    running,\n    setRunning\n  } = useBetween(ShareableRunningState);\n  const {\n    setFinished\n  } = useBetween(ShareableFinishedState);\n  const {\n    setOutput\n  } = useBetween(ShareableOutputState);\n  const {\n    setWarning\n  } = useBetween(ShareableWarningState); //const [attempts, ] = useState(0);\n\n  const [finalParams] = useState(JSON.parse(JSON.stringify(probeParams))); // eslint-disable-next-line\n\n  const [startTime, setStartTime] = useState(0); // Run on mount\n\n  useEffect(() => {\n    let mounted = true;\n    setStartTime(Date.now()); // Start Optimizer\n\n    console.log(running);\n    runOptimizer(finalParams).then(output => {\n      if (mounted) {\n        setOutput(output);\n        setFinished(true);\n        setRunning(false);\n      }\n    }).catch(err => {\n      console.log(err);\n      setWarning('Optimization run timed out. Please try again.');\n    });\n    return () => {\n      mounted = false;\n    }; // eslint-disable-next-line \n  }, []);\n  return null;\n};\n\n_s(Optimizer, \"Nu/WsWN7WtqwpR5HJq4cvL8mRuM=\", false, function () {\n  return [useBetween, useBetween, useBetween, useBetween, useBetween];\n});\n\n_c = Optimizer;\nexport default Optimizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Optimizer\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/Optimizer.js"],"names":["useState","useEffect","useBetween","ShareableProbeParams","ShareableRunningState","ShareableFinishedState","ShareableOutputState","ShareableWarningState","NodeFetch","runOptimizer","finalParams","endPoint","params","temperature","parseFloat","sodium","magnesium","headers","method","body","JSON","stringify","then","response","json","Optimizer","probeParams","running","setRunning","setFinished","setOutput","setWarning","parse","startTime","setStartTime","mounted","Date","now","console","log","output","catch","err"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareableProbeParams } from './Buttons.js';\nimport { ShareableRunningState, ShareableFinishedState, ShareableOutputState, ShareableWarningState } from './Output.js';\n//import useInterval from './useInterval.js';\nimport NodeFetch from 'node-fetch';\n\n//'http://127.0.0.1:8000';\n\n\n\nasync function runOptimizer(finalParams) {\n    //var endPoint = process.env.REACT_APP_ENDPOINTADDRESS.concat('/start_optimizer');\n    var endPoint = 'http://127.0.0.1:8000/start_optimizer';\n    finalParams.params.temperature = parseFloat(finalParams.params.temperature);\n    finalParams.params.sodium = parseFloat(finalParams.params.sodium)/1000.0;\n    finalParams.params.magnesium = parseFloat(finalParams.params.magnesium)/1000.0;\n    return NodeFetch(endPoint,\n    {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n        body: JSON.stringify({'probeParams': finalParams})\n    }).then(response => {\n        return response.json();\n    })\n}\n\nconst Optimizer = () => {\n\n    //const maxReattempts = 5;\n\n    const { probeParams } = useBetween(ShareableProbeParams);\n    // eslint-disable-next-line\n    const { running, setRunning } = useBetween(ShareableRunningState);\n    const { setFinished } = useBetween(ShareableFinishedState);\n    const { setOutput } = useBetween(ShareableOutputState);\n    const { setWarning } = useBetween(ShareableWarningState);\n    //const [attempts, ] = useState(0);\n    const [finalParams, ] = useState(JSON.parse(JSON.stringify(probeParams)));\n    // eslint-disable-next-line\n    const [startTime, setStartTime] = useState(0);\n\n    // Run on mount\n    useEffect(() => {\n        let mounted = true;\n        setStartTime(Date.now());\n        // Start Optimizer\n        console.log(running);\n        runOptimizer(finalParams)\n        .then(output => {\n            if(mounted) {\n                setOutput(output);\n                setFinished(true);\n                setRunning(false);\n            }\n        }).catch(err => {\n            console.log(err);\n            setWarning('Optimization run timed out. Please try again.');\n        })\n\n        return () => {\n            mounted = false;\n        }\n    // eslint-disable-next-line \n    }, []);\n\n    return null;\n};\n\nexport default Optimizer;"]},"metadata":{},"sourceType":"module"}