{"ast":null,"code":"var _jsxFileName = \"/home/leland/MLPractice/snp-lamp-design-client/src/ConditionEntry.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareableProbeParams } from './Buttons.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConditionEntry = () => {\n  _s();\n\n  const {\n    probeParams,\n    setProbeParams\n  } = useBetween(ShareableProbeParams);\n\n  const handleTemperature = (event, newValue) => {\n    var copyParams = probeParams;\n    copyParams.temperature = parseFloat(newValue);\n    setProbeParams(copyParams);\n  };\n\n  const handleSodium = (event, newValue) => {\n    var copyParams = probeParams;\n    copyParams.sodium = parseFloat(newValue) / 1000.0;\n    setProbeParams(copyParams);\n  };\n\n  const handleMagnesium = (event, newValue) => {\n    var copyParams = probeParams;\n    copyParams.magnesium = parseFloat(newValue) / 1000.0;\n    setProbeParams(copyParams);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conditionentry\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"condition-form\",\n      id: \"temperature-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"temperature\",\n        children: \"Temperature (C)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"temperature\",\n        name: \"temperature\",\n        onChange: handleTemperature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"condition-form\",\n      id: \"sodium-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"sodium\",\n        children: \"[Sodium] (mM)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"sodium\",\n        name: \"sodium\",\n        onChange: handleSodium\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"condition-form\",\n      id: \"magnesium-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"magnesium\",\n        children: \"[Magnesi(mM)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"magnesium\",\n        name: \"magnesium\",\n        onChange: handleMagnesium\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConditionEntry, \"MDoz6iyBBgnM8xPCM2uOJAepWGI=\", false, function () {\n  return [useBetween];\n});\n\n_c = ConditionEntry;\nexport default ConditionEntry;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConditionEntry\");","map":{"version":3,"sources":["/home/leland/MLPractice/snp-lamp-design-client/src/ConditionEntry.js"],"names":["React","useBetween","ShareableProbeParams","ConditionEntry","probeParams","setProbeParams","handleTemperature","event","newValue","copyParams","temperature","parseFloat","handleSodium","sodium","handleMagnesium","magnesium"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,oBAAT,QAAqC,cAArC;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAEzB,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCJ,UAAU,CAACC,oBAAD,CAAlD;;AAEA,QAAMI,iBAAiB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAIC,UAAU,GAAGL,WAAjB;AACAK,IAAAA,UAAU,CAACC,WAAX,GAAyBC,UAAU,CAACH,QAAD,CAAnC;AACAH,IAAAA,cAAc,CAACI,UAAD,CAAd;AACH,GAJD;;AAKA,QAAMG,YAAY,GAAG,CAACL,KAAD,EAAQC,QAAR,KAAqB;AACtC,QAAIC,UAAU,GAAGL,WAAjB;AACAK,IAAAA,UAAU,CAACI,MAAX,GAAoBF,UAAU,CAACH,QAAD,CAAV,GAAqB,MAAzC;AACAH,IAAAA,cAAc,CAACI,UAAD,CAAd;AACH,GAJD;;AAKA,QAAMK,eAAe,GAAG,CAACP,KAAD,EAAQC,QAAR,KAAqB;AACzC,QAAIC,UAAU,GAAGL,WAAjB;AACAK,IAAAA,UAAU,CAACM,SAAX,GAAuBJ,UAAU,CAACH,QAAD,CAAV,GAAqB,MAA5C;AACAH,IAAAA,cAAc,CAACI,UAAD,CAAd;AACH,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACI;AAAK,MAAA,KAAK,EAAC,gBAAX;AAA4B,MAAA,EAAE,EAAC,kBAA/B;AAAA,8BACI;AAAO,QAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,aAAtB;AAAoC,QAAA,IAAI,EAAC,aAAzC;AAAuD,QAAA,QAAQ,EAAEH;AAAjE;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,KAAK,EAAC,gBAAX;AAA4B,MAAA,EAAE,EAAC,aAA/B;AAAA,8BACI;AAAO,QAAA,GAAG,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,QAAtB;AAA+B,QAAA,IAAI,EAAC,QAApC;AAA6C,QAAA,QAAQ,EAAEM;AAAvD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eASI;AAAK,MAAA,KAAK,EAAC,gBAAX;AAA4B,MAAA,EAAE,EAAC,gBAA/B;AAAA,8BACI;AAAO,QAAA,GAAG,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,WAAtB;AAAkC,QAAA,IAAI,EAAC,WAAvC;AAAmD,QAAA,QAAQ,EAAEE;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CApCD;;GAAMX,c;UAEsCF,U;;;KAFtCE,c;AAsCN,eAAeA,cAAf","sourcesContent":["import React from 'react';\nimport { useBetween } from 'use-between';\nimport { ShareableProbeParams } from './Buttons.js';\n\nconst ConditionEntry = () => {\n\n    const { probeParams, setProbeParams } = useBetween(ShareableProbeParams);\n\n    const handleTemperature = (event, newValue) => {\n        var copyParams = probeParams;\n        copyParams.temperature = parseFloat(newValue);\n        setProbeParams(copyParams);\n    };\n    const handleSodium = (event, newValue) => {\n        var copyParams = probeParams;\n        copyParams.sodium = parseFloat(newValue)/1000.0;\n        setProbeParams(copyParams);\n    };\n    const handleMagnesium = (event, newValue) => {\n        var copyParams = probeParams;\n        copyParams.magnesium = parseFloat(newValue)/1000.0;\n        setProbeParams(copyParams);\n    };\n\n    return (\n        <div className=\"conditionentry\">\n            <div class=\"condition-form\" id=\"temperature-form\">\n                <label for=\"temperature\">Temperature (C)</label>\n                <input type=\"text\" id=\"temperature\" name=\"temperature\" onChange={handleTemperature} />\n            </div>\n            <div class=\"condition-form\" id=\"sodium-form\">\n                <label for=\"sodium\">[Sodium] (mM)</label>\n                <input type=\"text\" id=\"sodium\" name=\"sodium\" onChange={handleSodium} />\n            </div>\n            <div class=\"condition-form\" id=\"magnesium-form\">\n                <label for=\"magnesium\">[Magnesi(mM)</label>\n                <input type=\"text\" id=\"magnesium\" name=\"magnesium\" onChange={handleMagnesium} />\n            </div>\n        </div>\n    );\n};\n\nexport default ConditionEntry;"]},"metadata":{},"sourceType":"module"}